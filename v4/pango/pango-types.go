// Package pango was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package pango

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// The `PangoLanguage` structure is used to
// represent a language.
//
// `PangoLanguage` pointers can be efficiently
// copied and compared with each other.
type Language struct {
}

// The `PangoRectangle` structure represents a rectangle.
//
// `PangoRectangle` is frequently used to represent the logical or ink
// extents of a single glyph or section of text. (See, for instance,
// [method@Pango.Font.get_glyph_extents].)
type Rectangle struct {
	X int

	Y int

	Width int

	Height int
}

// A `PangoGlyph` represents a single glyph in the output form of a string.
type Glyph = uint32

var xExtentsToPixels func(*Rectangle, *Rectangle)

// Converts extents from Pango units to device units.
//
// The conversion is done by dividing by the %PANGO_SCALE factor and
// performing rounding.
//
// The @inclusive rectangle is converted by flooring the x/y coordinates
// and extending width/height, such that the final rectangle completely
// includes the original rectangle.
//
// The @nearest rectangle is converted by rounding the coordinates
// of the rectangle to the nearest device unit (pixel).
//
// The rule to which argument to use is: if you want the resulting device-space
// rectangle to completely contain the original rectangle, pass it in as
// @inclusive. If you want two touching-but-not-overlapping rectangles stay
// touching-but-not-overlapping after rounding to device units, pass them in
// as @nearest.
func ExtentsToPixels(InclusiveVar *Rectangle, NearestVar *Rectangle) {

	xExtentsToPixels(InclusiveVar, NearestVar)

}

var xUnitsFromDouble func(float64) int

// Converts a floating-point number to Pango units.
//
// The conversion is done by multiplying @d by %PANGO_SCALE and
// rounding the result to nearest integer.
func UnitsFromDouble(DVar float64) int {

	cret := xUnitsFromDouble(DVar)
	return cret
}

var xUnitsToDouble func(int) float64

// Converts a number in Pango units to floating-point.
//
// The conversion is done by dividing @i by %PANGO_SCALE.
func UnitsToDouble(IVar int) float64 {

	cret := xUnitsToDouble(IVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xExtentsToPixels, lib, "pango_extents_to_pixels")
	core.PuregoSafeRegister(&xUnitsFromDouble, lib, "pango_units_from_double")
	core.PuregoSafeRegister(&xUnitsToDouble, lib, "pango_units_to_double")

}
