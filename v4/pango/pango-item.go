// Package pango was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package pango

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
)

// The `PangoAnalysis` structure stores information about
// the properties of a segment of text.
type Analysis struct {
	ShapeEngine uintptr

	LangEngine uintptr

	Font *Font

	Level byte

	Gravity byte

	Flags byte

	Script byte

	Language *Language

	ExtraAttrs *glib.SList
}

// The `PangoItem` structure stores information about a segment of text.
//
// You typically obtain `PangoItems` by itemizing a piece of text
// with [func@itemize].
type Item struct {
	Offset int

	Length int

	NumChars int

	Analysis uintptr
}

var xItemize func(uintptr, string, int, int, *AttrList, *AttrIterator) *glib.List

// Breaks a piece of text into segments with consistent directional
// level and font.
//
// Each byte of @text will be contained in exactly one of the items in the
// returned list; the generated list of items will be in logical order (the
// start offsets of the items are ascending).
//
// @cached_iter should be an iterator over @attrs currently positioned
// at a range before or containing @start_index; @cached_iter will be
// advanced to the range covering the position just after
// @start_index + @length. (i.e. if itemizing in a loop, just keep passing
// in the same @cached_iter).
func Itemize(ContextVar *Context, TextVar string, StartIndexVar int, LengthVar int, AttrsVar *AttrList, CachedIterVar *AttrIterator) *glib.List {

	return xItemize(ContextVar.GoPointer(), TextVar, StartIndexVar, LengthVar, AttrsVar, CachedIterVar)

}

var xItemizeWithBaseDir func(uintptr, Direction, string, int, int, *AttrList, *AttrIterator) *glib.List

// Like `pango_itemize()`, but with an explicitly specified base direction.
//
// The base direction is used when computing bidirectional levels.
// [func@itemize] gets the base direction from the `PangoContext`
// (see [method@Pango.Context.set_base_dir]).
func ItemizeWithBaseDir(ContextVar *Context, BaseDirVar Direction, TextVar string, StartIndexVar int, LengthVar int, AttrsVar *AttrList, CachedIterVar *AttrIterator) *glib.List {

	return xItemizeWithBaseDir(ContextVar.GoPointer(), BaseDirVar, TextVar, StartIndexVar, LengthVar, AttrsVar, CachedIterVar)

}

var xReorderItems func(*glib.List) *glib.List

// Reorder items from logical order to visual order.
//
// The visual order is determined from the associated directional
// levels of the items. The original list is unmodified.
//
// (Please open a bug if you use this function.
//
//	It is not a particularly convenient interface, and the code
//	is duplicated elsewhere in Pango for that reason.)
func ReorderItems(ItemsVar *glib.List) *glib.List {

	return xReorderItems(ItemsVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("PANGO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xItemize, lib, "pango_itemize")
	core.PuregoSafeRegister(&xItemizeWithBaseDir, lib, "pango_itemize_with_base_dir")
	core.PuregoSafeRegister(&xReorderItems, lib, "pango_reorder_items")

}
