// Package gdk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gdk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/cairo"
	"github.com/jwijenbergh/puregotk/v4/gdkpixbuf"
)

var xPixbufGetFromSurface func(*cairo.Surface, int32, int32, int32, int32) uintptr

// Transfers image data from a `cairo_surface_t` and converts it
// to a `GdkPixbuf`.
//
// This allows you to efficiently read individual pixels from cairo surfaces.
//
// This function will create an RGB pixbuf with 8 bits per channel.
// The pixbuf will contain an alpha channel if the @surface contains one.
func PixbufGetFromSurface(SurfaceVar *cairo.Surface, SrcXVar int32, SrcYVar int32, WidthVar int32, HeightVar int32) *gdkpixbuf.Pixbuf {

	PixbufGetFromSurfacePtr := xPixbufGetFromSurface(SurfaceVar, SrcXVar, SrcYVar, WidthVar, HeightVar)
	if PixbufGetFromSurfacePtr == 0 {
		return nil
	}

	PixbufGetFromSurfaceCls := &gdkpixbuf.Pixbuf{}
	PixbufGetFromSurfaceCls.Ptr = PixbufGetFromSurfacePtr
	return PixbufGetFromSurfaceCls

}

var xPixbufGetFromTexture func(uintptr) uintptr

// Creates a new pixbuf from @texture.
//
// This should generally not be used in newly written code as later
// stages will almost certainly convert the pixbuf back into a texture
// to draw it on screen.
func PixbufGetFromTexture(TextureVar *Texture) *gdkpixbuf.Pixbuf {

	PixbufGetFromTexturePtr := xPixbufGetFromTexture(TextureVar.GoPointer())
	if PixbufGetFromTexturePtr == 0 {
		return nil
	}

	PixbufGetFromTextureCls := &gdkpixbuf.Pixbuf{}
	PixbufGetFromTextureCls.Ptr = PixbufGetFromTexturePtr
	return PixbufGetFromTextureCls

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GDK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xPixbufGetFromSurface, lib, "gdk_pixbuf_get_from_surface")
	core.PuregoSafeRegister(&xPixbufGetFromTexture, lib, "gdk_pixbuf_get_from_texture")

}
