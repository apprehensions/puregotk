// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// Opaque datatype that records a start time.
type Timer struct {
}

var xTimeValFromIso8601 func(string, *TimeVal) bool

// Converts a string containing an ISO 8601 encoded date and time
// to a #GTimeVal and puts it into @time_.
//
// @iso_date must include year, month, day, hours, minutes, and
// seconds. It can optionally include fractions of a second and a time
// zone indicator. (In the absence of any time zone indication, the
// timestamp is assumed to be in local time.)
//
// Any leading or trailing space in @iso_date is ignored.
//
// This function was deprecated, along with #GTimeVal itself, in GLib 2.62.
// Equivalent functionality is available using code like:
// |[
// GDateTime *dt = g_date_time_new_from_iso8601 (iso8601_string, NULL);
// gint64 time_val = g_date_time_to_unix (dt);
// g_date_time_unref (dt);
// ]|
func TimeValFromIso8601(IsoDateVar string, TimeVar *TimeVal) bool {

	cret := xTimeValFromIso8601(IsoDateVar, TimeVar)
	return cret
}

var xUsleep func(uint32)

// Pauses the current thread for the given number of microseconds.
//
// There are 1 million microseconds per second (represented by the
// %G_USEC_PER_SEC macro). g_usleep() may have limited precision,
// depending on hardware and operating system; don't rely on the exact
// length of the sleep.
func Usleep(MicrosecondsVar uint32) {

	xUsleep(MicrosecondsVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xTimeValFromIso8601, lib, "g_time_val_from_iso8601")
	core.PuregoSafeRegister(&xUsleep, lib, "g_usleep")

}
