// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// An opaque structure representing a HMAC operation.
// To create a new GHmac, use g_hmac_new(). To free
// a GHmac, use g_hmac_unref().
type Hmac struct {
}

var xComputeHmacForBytes func(ChecksumType, *Bytes, *Bytes) string

// Computes the HMAC for a binary @data. This is a
// convenience wrapper for g_hmac_new(), g_hmac_get_string()
// and g_hmac_unref().
//
// The hexadecimal string returned will be in lower case.
func ComputeHmacForBytes(DigestTypeVar ChecksumType, KeyVar *Bytes, DataVar *Bytes) string {

	cret := xComputeHmacForBytes(DigestTypeVar, KeyVar, DataVar)
	return cret
}

var xComputeHmacForData func(ChecksumType, uintptr, uint, uintptr, uint) string

// Computes the HMAC for a binary @data of @length. This is a
// convenience wrapper for g_hmac_new(), g_hmac_get_string()
// and g_hmac_unref().
//
// The hexadecimal string returned will be in lower case.
func ComputeHmacForData(DigestTypeVar ChecksumType, KeyVar uintptr, KeyLenVar uint, DataVar uintptr, LengthVar uint) string {

	cret := xComputeHmacForData(DigestTypeVar, KeyVar, KeyLenVar, DataVar, LengthVar)
	return cret
}

var xComputeHmacForString func(ChecksumType, uintptr, uint, string, int) string

// Computes the HMAC for a string.
//
// The hexadecimal string returned will be in lower case.
func ComputeHmacForString(DigestTypeVar ChecksumType, KeyVar uintptr, KeyLenVar uint, StrVar string, LengthVar int) string {

	cret := xComputeHmacForString(DigestTypeVar, KeyVar, KeyLenVar, StrVar, LengthVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xComputeHmacForBytes, lib, "g_compute_hmac_for_bytes")
	core.PuregoSafeRegister(&xComputeHmacForData, lib, "g_compute_hmac_for_data")
	core.PuregoSafeRegister(&xComputeHmacForString, lib, "g_compute_hmac_for_string")

}
