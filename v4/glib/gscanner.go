// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

// Specifies the type of the message handler function.
type ScannerMsgFunc func(*Scanner, string, bool)

// The data structure representing a lexical scanner.
//
// You should set @input_name after creating the scanner, since
// it is used by the default message handler when displaying
// warnings and errors. If you are scanning a file, the filename
// would be a good choice.
//
// The @user_data and @max_parse_errors fields are not used.
// If you need to associate extra data with the scanner you
// can place them here.
//
// If you want to use your own message handler you can set the
// @msg_handler field. The type of the message handler function
// is declared by #GScannerMsgFunc.
type Scanner struct {
	UserData uintptr

	MaxParseErrors uint

	ParseErrors uint

	InputName uintptr

	Qdata *Data

	Config *ScannerConfig

	Token TokenType

	Value TokenValue

	Line uint

	Position uint

	NextToken TokenType

	NextValue TokenValue

	NextLine uint

	NextPosition uint

	SymbolTable *HashTable

	InputFd int32

	Text uintptr

	TextEnd uintptr

	Buffer uintptr

	ScopeId uint

	MsgHandler ScannerMsgFunc
}

// Specifies the #GScanner parser configuration. Most settings can
// be changed during the parsing phase and will affect the lexical
// parsing of the next unpeeked token.
type ScannerConfig struct {
	CsetSkipCharacters uintptr

	CsetIdentifierFirst uintptr

	CsetIdentifierNth uintptr

	CpairCommentSingle uintptr

	CaseSensitive uint

	SkipCommentMulti uint

	SkipCommentSingle uint

	ScanCommentMulti uint

	ScanIdentifier uint

	ScanIdentifier1char uint

	ScanIdentifierNULL uint

	ScanSymbols uint

	ScanBinary uint

	ScanOctal uint

	ScanFloat uint

	ScanHex uint

	ScanHexDollar uint

	ScanStringSq uint

	ScanStringDq uint

	Numbers2Int uint

	Int2Float uint

	Identifier2String uint

	Char2Token uint

	Symbol2Token uint

	Scope0Fallback uint

	StoreInt64 uint

	PaddingDummy uint
}

// A union holding the value of the token.
type TokenValue = uintptr

// The possible errors, used in the @v_error field
// of #GTokenValue, when the token is a %G_TOKEN_ERROR.
type ErrorType int

const (

	// unknown error
	GErrUnknownValue ErrorType = 0
	// unexpected end of file
	GErrUnexpEofValue ErrorType = 1
	// unterminated string constant
	GErrUnexpEofInStringValue ErrorType = 2
	// unterminated comment
	GErrUnexpEofInCommentValue ErrorType = 3
	// non-digit character in a number
	GErrNonDigitInConstValue ErrorType = 4
	// digit beyond radix in a number
	GErrDigitRadixValue ErrorType = 5
	// non-decimal floating point number
	GErrFloatRadixValue ErrorType = 6
	// malformed floating point number
	GErrFloatMalformedValue ErrorType = 7
)

// The possible types of token returned from each
// g_scanner_get_next_token() call.
type TokenType int

const (

	// the end of the file
	GTokenEofValue TokenType = 0
	// a '(' character
	GTokenLeftParenValue TokenType = 40
	// a ')' character
	GTokenRightParenValue TokenType = 41
	// a '{' character
	GTokenLeftCurlyValue TokenType = 123
	// a '}' character
	GTokenRightCurlyValue TokenType = 125
	// a '[' character
	GTokenLeftBraceValue TokenType = 91
	// a ']' character
	GTokenRightBraceValue TokenType = 93
	// a '=' character
	GTokenEqualSignValue TokenType = 61
	// a ',' character
	GTokenCommaValue TokenType = 44
	// not a token
	GTokenNoneValue TokenType = 256
	// an error occurred
	GTokenErrorValue TokenType = 257
	// a character
	GTokenCharValue TokenType = 258
	// a binary integer
	GTokenBinaryValue TokenType = 259
	// an octal integer
	GTokenOctalValue TokenType = 260
	// an integer
	GTokenIntValue TokenType = 261
	// a hex integer
	GTokenHexValue TokenType = 262
	// a floating point number
	GTokenFloatValue TokenType = 263
	// a string
	GTokenStringValue TokenType = 264
	// a symbol
	GTokenSymbolValue TokenType = 265
	// an identifier
	GTokenIdentifierValue TokenType = 266
	// a null identifier
	GTokenIdentifierNullValue TokenType = 267
	// one line comment
	GTokenCommentSingleValue TokenType = 268
	// multi line comment
	GTokenCommentMultiValue TokenType = 269
)
