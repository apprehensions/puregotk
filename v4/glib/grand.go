// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// The GRand struct is an opaque data structure. It should only be
// accessed through the g_rand_* functions.
type Rand struct {
}

var xRandomDouble func() float64

// Returns a random #gdouble equally distributed over the range [0..1).
func RandomDouble() float64 {

	cret := xRandomDouble()
	return cret
}

var xRandomDoubleRange func(float64, float64) float64

// Returns a random #gdouble equally distributed over the range
// [@begin..@end).
func RandomDoubleRange(BeginVar float64, EndVar float64) float64 {

	cret := xRandomDoubleRange(BeginVar, EndVar)
	return cret
}

var xRandomInt func() uint32

// Return a random #guint32 equally distributed over the range
// [0..2^32-1].
func RandomInt() uint32 {

	cret := xRandomInt()
	return cret
}

var xRandomIntRange func(int32, int32) int32

// Returns a random #gint32 equally distributed over the range
// [@begin..@end-1].
func RandomIntRange(BeginVar int32, EndVar int32) int32 {

	cret := xRandomIntRange(BeginVar, EndVar)
	return cret
}

var xRandomSetSeed func(uint32)

// Sets the seed for the global random number generator, which is used
// by the g_random_* functions, to @seed.
func RandomSetSeed(SeedVar uint32) {

	xRandomSetSeed(SeedVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xRandomDouble, lib, "g_random_double")
	core.PuregoSafeRegister(&xRandomDoubleRange, lib, "g_random_double_range")
	core.PuregoSafeRegister(&xRandomInt, lib, "g_random_int")
	core.PuregoSafeRegister(&xRandomIntRange, lib, "g_random_int_range")
	core.PuregoSafeRegister(&xRandomSetSeed, lib, "g_random_set_seed")

}
