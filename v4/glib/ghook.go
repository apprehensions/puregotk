// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// Defines the type of a hook function that can be invoked
// by g_hook_list_invoke_check().
type HookCheckFunc func(uintptr) bool

// Defines the type of function used by g_hook_list_marshal_check().
type HookCheckMarshaller func(*Hook, uintptr) bool

// Defines the type of function used to compare #GHook elements in
// g_hook_insert_sorted().
type HookCompareFunc func(*Hook, *Hook) int

// Defines the type of function to be called when a hook in a
// list of hooks gets finalized.
type HookFinalizeFunc func(*HookList, *Hook)

// Defines the type of the function passed to g_hook_find().
type HookFindFunc func(*Hook, uintptr) bool

// Defines the type of a hook function that can be invoked
// by g_hook_list_invoke().
type HookFunc func(uintptr)

// Defines the type of function used by g_hook_list_marshal().
type HookMarshaller func(*Hook, uintptr)

// The #GHook struct represents a single hook function in a #GHookList.
type Hook struct {
	Data uintptr

	Next *Hook

	Prev *Hook

	RefCount uint

	HookId uint32

	Flags uint

	Func uintptr

	Destroy DestroyNotify
}

// The #GHookList struct represents a list of hook functions.
type HookList struct {
	SeqId uint32

	HookSize uint

	IsSetup uint

	Hooks *Hook

	Dummy3 uintptr

	FinalizeHook HookFinalizeFunc

	Dummy uintptr
}

// Flags used internally in the #GHook implementation.
type HookFlagMask int

const (

	// set if the hook has not been destroyed
	GHookFlagActiveValue HookFlagMask = 1
	// set if the hook is currently being run
	GHookFlagInCallValue HookFlagMask = 2
	// A mask covering all bits reserved for
	//   hook flags; see %G_HOOK_FLAG_USER_SHIFT
	GHookFlagMaskValue HookFlagMask = 15
)

var xHookDestroy func(*HookList, uint32) bool

// Destroys a #GHook, given its ID.
func HookDestroy(HookListVar *HookList, HookIdVar uint32) bool {

	cret := xHookDestroy(HookListVar, HookIdVar)
	return cret
}

var xHookDestroyLink func(*HookList, *Hook)

// Removes one #GHook from a #GHookList, marking it
// inactive and calling g_hook_unref() on it.
func HookDestroyLink(HookListVar *HookList, HookVar *Hook) {

	xHookDestroyLink(HookListVar, HookVar)

}

var xHookFree func(*HookList, *Hook)

// Calls the #GHookList @finalize_hook function if it exists,
// and frees the memory allocated for the #GHook.
func HookFree(HookListVar *HookList, HookVar *Hook) {

	xHookFree(HookListVar, HookVar)

}

var xHookInsertBefore func(*HookList, *Hook, *Hook)

// Inserts a #GHook into a #GHookList, before a given #GHook.
func HookInsertBefore(HookListVar *HookList, SiblingVar *Hook, HookVar *Hook) {

	xHookInsertBefore(HookListVar, SiblingVar, HookVar)

}

var xHookPrepend func(*HookList, *Hook)

// Prepends a #GHook on the start of a #GHookList.
func HookPrepend(HookListVar *HookList, HookVar *Hook) {

	xHookPrepend(HookListVar, HookVar)

}

var xHookUnref func(*HookList, *Hook)

// Decrements the reference count of a #GHook.
// If the reference count falls to 0, the #GHook is removed
// from the #GHookList and g_hook_free() is called to free it.
func HookUnref(HookListVar *HookList, HookVar *Hook) {

	xHookUnref(HookListVar, HookVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xHookDestroy, lib, "g_hook_destroy")
	core.PuregoSafeRegister(&xHookDestroyLink, lib, "g_hook_destroy_link")
	core.PuregoSafeRegister(&xHookFree, lib, "g_hook_free")
	core.PuregoSafeRegister(&xHookInsertBefore, lib, "g_hook_insert_before")
	core.PuregoSafeRegister(&xHookPrepend, lib, "g_hook_prepend")
	core.PuregoSafeRegister(&xHookUnref, lib, "g_hook_unref")

}
