// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// An opaque structure representing a checksumming operation.
//
// To create a new GChecksum, use g_checksum_new(). To free
// a GChecksum, use g_checksum_free().
type Checksum struct {
}

// The hashing algorithm to be used by #GChecksum when performing the
// digest of some data.
//
// Note that the #GChecksumType enumeration may be extended at a later
// date to include new hashing algorithm types.
type ChecksumType int

const (

	// Use the MD5 hashing algorithm
	GChecksumMd5Value ChecksumType = 0
	// Use the SHA-1 hashing algorithm
	GChecksumSha1Value ChecksumType = 1
	// Use the SHA-256 hashing algorithm
	GChecksumSha256Value ChecksumType = 2
	// Use the SHA-512 hashing algorithm (Since: 2.36)
	GChecksumSha512Value ChecksumType = 3
	// Use the SHA-384 hashing algorithm (Since: 2.51)
	GChecksumSha384Value ChecksumType = 4
)

var xChecksumTypeGetLength func(ChecksumType) int

// Gets the length in bytes of digests of type @checksum_type
func ChecksumTypeGetLength(ChecksumTypeVar ChecksumType) int {

	cret := xChecksumTypeGetLength(ChecksumTypeVar)
	return cret
}

var xComputeChecksumForBytes func(ChecksumType, *Bytes) string

// Computes the checksum for a binary @data. This is a
// convenience wrapper for g_checksum_new(), g_checksum_get_string()
// and g_checksum_free().
//
// The hexadecimal string returned will be in lower case.
func ComputeChecksumForBytes(ChecksumTypeVar ChecksumType, DataVar *Bytes) string {

	cret := xComputeChecksumForBytes(ChecksumTypeVar, DataVar)
	return cret
}

var xComputeChecksumForData func(ChecksumType, uintptr, uint) string

// Computes the checksum for a binary @data of @length. This is a
// convenience wrapper for g_checksum_new(), g_checksum_get_string()
// and g_checksum_free().
//
// The hexadecimal string returned will be in lower case.
func ComputeChecksumForData(ChecksumTypeVar ChecksumType, DataVar uintptr, LengthVar uint) string {

	cret := xComputeChecksumForData(ChecksumTypeVar, DataVar, LengthVar)
	return cret
}

var xComputeChecksumForString func(ChecksumType, string, int) string

// Computes the checksum of a string.
//
// The hexadecimal string returned will be in lower case.
func ComputeChecksumForString(ChecksumTypeVar ChecksumType, StrVar string, LengthVar int) string {

	cret := xComputeChecksumForString(ChecksumTypeVar, StrVar, LengthVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xChecksumTypeGetLength, lib, "g_checksum_type_get_length")
	core.PuregoSafeRegister(&xComputeChecksumForBytes, lib, "g_compute_checksum_for_bytes")
	core.PuregoSafeRegister(&xComputeChecksumForData, lib, "g_compute_checksum_for_data")
	core.PuregoSafeRegister(&xComputeChecksumForString, lib, "g_compute_checksum_for_string")

}
