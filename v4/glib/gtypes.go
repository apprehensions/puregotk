// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

// Specifies the type of a comparison function used to compare two
// values.  The function should return a negative integer if the first
// value comes before the second, 0 if they are equal, or a positive
// integer if the first value comes after the second.
type CompareDataFunc func(uintptr, uintptr, uintptr) int

// Specifies the type of a comparison function used to compare two
// values.  The function should return a negative integer if the first
// value comes before the second, 0 if they are equal, or a positive
// integer if the first value comes after the second.
type CompareFunc func(uintptr, uintptr) int

// A function of this signature is used to copy the node data
// when doing a deep-copy of a tree.
type CopyFunc func(uintptr, uintptr) uintptr

// Specifies the type of function which is called when a data element
// is destroyed. It is passed the pointer to the data element and
// should free any memory and resources allocated for it.
type DestroyNotify func(uintptr)

// Specifies the type of a function used to test two values for
// equality. The function should return %TRUE if both values are equal
// and %FALSE otherwise.
type EqualFunc func(uintptr, uintptr) bool

// Declares a type of function which takes an arbitrary
// data pointer argument and has no return value. It is
// not currently used in GLib or GTK+.
type FreeFunc func(uintptr)

// Specifies the type of functions passed to g_list_foreach() and
// g_slist_foreach().
type Func func(uintptr, uintptr)

// Specifies the type of the function passed to g_hash_table_foreach().
// It is called with each key/value pair, together with the @user_data
// parameter which is passed to g_hash_table_foreach().
type HFunc func(uintptr, uintptr, uintptr)

// Specifies the type of the hash function which is passed to
// g_hash_table_new() when a #GHashTable is created.
//
// The function is passed a key and should return a #guint hash value.
// The functions g_direct_hash(), g_int_hash() and g_str_hash() provide
// hash functions which can be used when the key is a #gpointer, #gint*,
// and #gchar* respectively.
//
// g_direct_hash() is also the appropriate hash function for keys
// of the form `GINT_TO_POINTER (n)` (or similar macros).
//
// A good hash functions should produce
// hash values that are evenly distributed over a fairly large range.
// The modulus is taken with the hash table size (a prime number) to
// find the 'bucket' to place each key into. The function should also
// be very fast, since it is called for each key lookup.
//
// Note that the hash functions provided by GLib have these qualities,
// but are not particularly robust against manufactured keys that
// cause hash collisions. Therefore, you should consider choosing
// a more secure hash function when using a GHashTable with keys
// that originate in untrusted data (such as HTTP requests).
// Using g_str_hash() in that situation might make your application
// vulnerable to
// [Algorithmic Complexity Attacks](https://lwn.net/Articles/474912/).
//
// The key to choosing a good hash is unpredictability.  Even
// cryptographic hashes are very easy to find collisions for when the
// remainder is taken modulo a somewhat predictable prime number.  There
// must be an element of randomness that an attacker is unable to guess.
type HashFunc func(uintptr) uint

// The type of functions which are used to translate user-visible
// strings, for &lt;option&gt;--help&lt;/option&gt; output.
type TranslateFunc func(string, uintptr) string

// Represents a precise time, with seconds and microseconds.
//
// Similar to the struct timeval returned by the `gettimeofday()`
// UNIX system call.
//
// GLib is attempting to unify around the use of 64-bit integers to
// represent microsecond-precision time. As such, this type will be
// removed from a future version of GLib. A consequence of using `glong` for
// `tv_sec` is that on 32-bit systems `GTimeVal` is subject to the year 2038
// problem.
type TimeVal struct {
	TvSec int32

	TvUsec int32
}

// The #GFloatIEEE754 and #GDoubleIEEE754 unions are used to access the sign,
// mantissa and exponent of IEEE floats and doubles. These unions are defined
// as appropriate for a given platform. IEEE floats and doubles are supported
// (used for storage) by at least Intel, PPC and Sparc.
type DoubleIEEE754 = uintptr

// The #GFloatIEEE754 and #GDoubleIEEE754 unions are used to access the sign,
// mantissa and exponent of IEEE floats and doubles. These unions are defined
// as appropriate for a given platform. IEEE floats and doubles are supported
// (used for storage) by at least Intel, PPC and Sparc.
type FloatIEEE754 = uintptr
