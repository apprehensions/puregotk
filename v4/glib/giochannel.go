// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// Specifies the type of function passed to g_io_add_watch() or
// g_io_add_watch_full(), which is called when the requested condition
// on a #GIOChannel is satisfied.
type IOFunc func(*IOChannel, IOCondition, uintptr) bool

// A data structure representing an IO Channel. The fields should be
// considered private and should only be accessed with the following
// functions.
type IOChannel struct {
	RefCount int32

	Funcs *IOFuncs

	Encoding uintptr

	ReadCd uintptr

	WriteCd uintptr

	LineTerm uintptr

	LineTermLen uint

	BufSize uint

	ReadBuf *String

	EncodedReadBuf *String

	WriteBuf *String

	PartialWriteBuf uintptr

	UseBuffer uint

	DoEncode uint

	CloseOnUnref uint

	IsReadable uint

	IsWriteable uint

	IsSeekable uint

	Reserved1 uintptr

	Reserved2 uintptr
}

// A table of functions used to handle different types of #GIOChannel
// in a generic way.
type IOFuncs struct {
}

// Specifies properties of a #GIOChannel. Some of the flags can only be
// read with g_io_channel_get_flags(), but not changed with
// g_io_channel_set_flags().
type IOFlags int

const (

	// turns on append mode, corresponds to %O_APPEND
	//     (see the documentation of the UNIX open() syscall)
	GIoFlagAppendValue IOFlags = 1
	// turns on nonblocking mode, corresponds to
	//     %O_NONBLOCK/%O_NDELAY (see the documentation of the UNIX open()
	//     syscall)
	GIoFlagNonblockValue IOFlags = 2
	// indicates that the io channel is readable.
	//     This flag cannot be changed.
	GIoFlagIsReadableValue IOFlags = 4
	// indicates that the io channel is writable.
	//     This flag cannot be changed.
	GIoFlagIsWritableValue IOFlags = 8
	// a misspelled version of @G_IO_FLAG_IS_WRITABLE
	//     that existed before the spelling was fixed in GLib 2.30. It is kept
	//     here for compatibility reasons. Deprecated since 2.30
	GIoFlagIsWriteableValue IOFlags = 8
	// indicates that the io channel is seekable,
	//     i.e. that g_io_channel_seek_position() can be used on it.
	//     This flag cannot be changed.
	GIoFlagIsSeekableValue IOFlags = 16
	// the mask that specifies all the valid flags.
	GIoFlagMaskValue IOFlags = 31
	// the mask of the flags that are returned from
	//     g_io_channel_get_flags()
	GIoFlagGetMaskValue IOFlags = 31
	// the mask of the flags that the user can modify
	//     with g_io_channel_set_flags()
	GIoFlagSetMaskValue IOFlags = 3
)

// Error codes returned by #GIOChannel operations.
type IOChannelError int

const (

	// File too large.
	GIoChannelErrorFbigValue IOChannelError = 0
	// Invalid argument.
	GIoChannelErrorInvalValue IOChannelError = 1
	// IO error.
	GIoChannelErrorIoValue IOChannelError = 2
	// File is a directory.
	GIoChannelErrorIsdirValue IOChannelError = 3
	// No space left on device.
	GIoChannelErrorNospcValue IOChannelError = 4
	// No such device or address.
	GIoChannelErrorNxioValue IOChannelError = 5
	// Value too large for defined datatype.
	GIoChannelErrorOverflowValue IOChannelError = 6
	// Broken pipe.
	GIoChannelErrorPipeValue IOChannelError = 7
	// Some other error.
	GIoChannelErrorFailedValue IOChannelError = 8
)

// #GIOError is only used by the deprecated functions
// g_io_channel_read(), g_io_channel_write(), and g_io_channel_seek().
type IOError int

const (

	// no error
	GIoErrorNoneValue IOError = 0
	// an EAGAIN error occurred
	GIoErrorAgainValue IOError = 1
	// an EINVAL error occurred
	GIoErrorInvalValue IOError = 2
	// another error occurred
	GIoErrorUnknownValue IOError = 3
)

// Statuses returned by most of the #GIOFuncs functions.
type IOStatus int

const (

	// An error occurred.
	GIoStatusErrorValue IOStatus = 0
	// Success.
	GIoStatusNormalValue IOStatus = 1
	// End of file.
	GIoStatusEofValue IOStatus = 2
	// Resource temporarily unavailable.
	GIoStatusAgainValue IOStatus = 3
)

// An enumeration specifying the base position for a
// g_io_channel_seek_position() operation.
type SeekType int

const (

	// the current position in the file.
	GSeekCurValue SeekType = 0
	// the start of the file.
	GSeekSetValue SeekType = 1
	// the end of the file.
	GSeekEndValue SeekType = 2
)

var xIoAddWatch func(*IOChannel, IOCondition, uintptr, uintptr) uint

// Adds the #GIOChannel into the default main loop context
// with the default priority.
func IoAddWatch(ChannelVar *IOChannel, ConditionVar IOCondition, FuncVar IOFunc, UserDataVar uintptr) uint {

	cret := xIoAddWatch(ChannelVar, ConditionVar, purego.NewCallback(FuncVar), UserDataVar)
	return cret
}

var xIoAddWatchFull func(*IOChannel, int, IOCondition, uintptr, uintptr, uintptr) uint

// Adds the #GIOChannel into the default main loop context
// with the given priority.
//
// This internally creates a main loop source using g_io_create_watch()
// and attaches it to the main loop context with g_source_attach().
// You can do these steps manually if you need greater control.
func IoAddWatchFull(ChannelVar *IOChannel, PriorityVar int, ConditionVar IOCondition, FuncVar IOFunc, UserDataVar uintptr, NotifyVar DestroyNotify) uint {

	cret := xIoAddWatchFull(ChannelVar, PriorityVar, ConditionVar, purego.NewCallback(FuncVar), UserDataVar, purego.NewCallback(NotifyVar))
	return cret
}

var xIoChannelErrorFromErrno func(int) IOChannelError

// Converts an `errno` error number to a #GIOChannelError.
func IoChannelErrorFromErrno(EnVar int) IOChannelError {

	cret := xIoChannelErrorFromErrno(EnVar)
	return cret
}

var xIoCreateWatch func(*IOChannel, IOCondition) *Source

// Creates a #GSource that's dispatched when @condition is met for the
// given @channel. For example, if condition is %G_IO_IN, the source will
// be dispatched when there's data available for reading.
//
// The callback function invoked by the #GSource should be added with
// g_source_set_callback(), but it has type #GIOFunc (not #GSourceFunc).
//
// g_io_add_watch() is a simpler interface to this same functionality, for
// the case where you want to add the source to the default main loop context
// at the default priority.
//
// On Windows, polling a #GSource created to watch a channel for a socket
// puts the socket in non-blocking mode. This is a side-effect of the
// implementation and unavoidable.
func IoCreateWatch(ChannelVar *IOChannel, ConditionVar IOCondition) *Source {

	cret := xIoCreateWatch(ChannelVar, ConditionVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xIoAddWatch, lib, "g_io_add_watch")
	core.PuregoSafeRegister(&xIoAddWatchFull, lib, "g_io_add_watch_full")
	core.PuregoSafeRegister(&xIoChannelErrorFromErrno, lib, "g_io_channel_error_from_errno")
	core.PuregoSafeRegister(&xIoCreateWatch, lib, "g_io_create_watch")

}
