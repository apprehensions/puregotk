// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

var xAtomicRefCountCompare func(int32, int32) bool

// Atomically compares the current value of @arc with @val.
func AtomicRefCountCompare(ArcVar int32, ValVar int32) bool {

	return xAtomicRefCountCompare(ArcVar, ValVar)

}

var xAtomicRefCountDec func(int32) bool

// Atomically decreases the reference count.
//
// If %TRUE is returned, the reference count reached 0. After this point, @arc
// is an undefined state and must be reinitialized with
// g_atomic_ref_count_init() to be used again.
func AtomicRefCountDec(ArcVar int32) bool {

	return xAtomicRefCountDec(ArcVar)

}

var xAtomicRefCountInc func(int32)

// Atomically increases the reference count.
func AtomicRefCountInc(ArcVar int32) {

	xAtomicRefCountInc(ArcVar)

}

var xAtomicRefCountInit func(int32)

// Initializes a reference count variable to 1.
func AtomicRefCountInit(ArcVar int32) {

	xAtomicRefCountInit(ArcVar)

}

var xRefCountCompare func(int32, int32) bool

// Compares the current value of @rc with @val.
func RefCountCompare(RcVar int32, ValVar int32) bool {

	return xRefCountCompare(RcVar, ValVar)

}

var xRefCountDec func(int32) bool

// Decreases the reference count.
//
// If %TRUE is returned, the reference count reached 0. After this point, @rc
// is an undefined state and must be reinitialized with
// g_ref_count_init() to be used again.
func RefCountDec(RcVar int32) bool {

	return xRefCountDec(RcVar)

}

var xRefCountInc func(int32)

// Increases the reference count.
func RefCountInc(RcVar int32) {

	xRefCountInc(RcVar)

}

var xRefCountInit func(int32)

// Initializes a reference count variable to 1.
func RefCountInit(RcVar int32) {

	xRefCountInit(RcVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xAtomicRefCountCompare, lib, "g_atomic_ref_count_compare")
	core.PuregoSafeRegister(&xAtomicRefCountDec, lib, "g_atomic_ref_count_dec")
	core.PuregoSafeRegister(&xAtomicRefCountInc, lib, "g_atomic_ref_count_inc")
	core.PuregoSafeRegister(&xAtomicRefCountInit, lib, "g_atomic_ref_count_init")
	core.PuregoSafeRegister(&xRefCountCompare, lib, "g_ref_count_compare")
	core.PuregoSafeRegister(&xRefCountDec, lib, "g_ref_count_dec")
	core.PuregoSafeRegister(&xRefCountInc, lib, "g_ref_count_inc")
	core.PuregoSafeRegister(&xRefCountInit, lib, "g_ref_count_init")

}
