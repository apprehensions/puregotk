// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

var xFprintf func(uintptr, string, ...interface{}) int32

// An implementation of the standard fprintf() function which supports
// positional parameters, as specified in the Single Unix Specification.
//
// `glib/gprintf.h` must be explicitly included in order to use this function.
func Fprintf(FileVar uintptr, FormatVar string, varArgs ...interface{}) int32 {

	return xFprintf(FileVar, FormatVar, varArgs...)

}

var xPrintf func(string, ...interface{}) int32

// An implementation of the standard printf() function which supports
// positional parameters, as specified in the Single Unix Specification.
//
// As with the standard printf(), this does not automatically append a trailing
// new-line character to the message, so typically @format should end with its
// own new-line character.
//
// `glib/gprintf.h` must be explicitly included in order to use this function.
func Printf(FormatVar string, varArgs ...interface{}) int32 {

	return xPrintf(FormatVar, varArgs...)

}

var xSprintf func(string, string, ...interface{}) int32

// An implementation of the standard sprintf() function which supports
// positional parameters, as specified in the Single Unix Specification.
//
// Note that it is usually better to use g_snprintf(), to avoid the
// risk of buffer overflow.
//
// `glib/gprintf.h` must be explicitly included in order to use this function.
//
// See also g_strdup_printf().
func Sprintf(StringVar string, FormatVar string, varArgs ...interface{}) int32 {

	return xSprintf(StringVar, FormatVar, varArgs...)

}

var xVasprintf func(string, string, []interface{}) int32

// An implementation of the GNU vasprintf() function which supports
// positional parameters, as specified in the Single Unix Specification.
// This function is similar to g_vsprintf(), except that it allocates a
// string to hold the output, instead of putting the output in a buffer
// you allocate in advance.
//
// The returned value in @string is guaranteed to be non-NULL, unless
// @format contains `%lc` or `%ls` conversions, which can fail if no
// multibyte representation is available for the given character.
//
// `glib/gprintf.h` must be explicitly included in order to use this function.
func Vasprintf(StringVar string, FormatVar string, ArgsVar []interface{}) int32 {

	return xVasprintf(StringVar, FormatVar, ArgsVar)

}

var xVfprintf func(uintptr, string, []interface{}) int32

// An implementation of the standard fprintf() function which supports
// positional parameters, as specified in the Single Unix Specification.
//
// `glib/gprintf.h` must be explicitly included in order to use this function.
func Vfprintf(FileVar uintptr, FormatVar string, ArgsVar []interface{}) int32 {

	return xVfprintf(FileVar, FormatVar, ArgsVar)

}

var xVprintf func(string, []interface{}) int32

// An implementation of the standard vprintf() function which supports
// positional parameters, as specified in the Single Unix Specification.
//
// `glib/gprintf.h` must be explicitly included in order to use this function.
func Vprintf(FormatVar string, ArgsVar []interface{}) int32 {

	return xVprintf(FormatVar, ArgsVar)

}

var xVsprintf func(string, string, []interface{}) int32

// An implementation of the standard vsprintf() function which supports
// positional parameters, as specified in the Single Unix Specification.
//
// `glib/gprintf.h` must be explicitly included in order to use this function.
func Vsprintf(StringVar string, FormatVar string, ArgsVar []interface{}) int32 {

	return xVsprintf(StringVar, FormatVar, ArgsVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xFprintf, lib, "g_fprintf")
	core.PuregoSafeRegister(&xPrintf, lib, "g_printf")
	core.PuregoSafeRegister(&xSprintf, lib, "g_sprintf")
	core.PuregoSafeRegister(&xVasprintf, lib, "g_vasprintf")
	core.PuregoSafeRegister(&xVfprintf, lib, "g_vfprintf")
	core.PuregoSafeRegister(&xVprintf, lib, "g_vprintf")
	core.PuregoSafeRegister(&xVsprintf, lib, "g_vsprintf")

}
