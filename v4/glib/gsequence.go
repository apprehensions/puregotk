// Package glib was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package glib

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// A #GSequenceIterCompareFunc is a function used to compare iterators.
// It must return zero if the iterators compare equal, a negative value
// if @a comes before @b, and a positive value if @b comes before @a.
type SequenceIterCompareFunc func(*SequenceIter, *SequenceIter, uintptr) int32

// The #GSequence struct is an opaque data type representing a
// [sequence][glib-Sequences] data type.
type Sequence struct {
}

// The #GSequenceIter struct is an opaque data type representing an
// iterator pointing into a #GSequence.
type SequenceIter struct {
}

var xSequenceGet func(*SequenceIter) uintptr

// Returns the data that @iter points to.
func SequenceGet(IterVar *SequenceIter) uintptr {

	return xSequenceGet(IterVar)

}

var xSequenceInsertBefore func(*SequenceIter, uintptr) *SequenceIter

// Inserts a new item just before the item pointed to by @iter.
func SequenceInsertBefore(IterVar *SequenceIter, DataVar uintptr) *SequenceIter {

	return xSequenceInsertBefore(IterVar, DataVar)

}

var xSequenceMove func(*SequenceIter, *SequenceIter)

// Moves the item pointed to by @src to the position indicated by @dest.
// After calling this function @dest will point to the position immediately
// after @src. It is allowed for @src and @dest to point into different
// sequences.
func SequenceMove(SrcVar *SequenceIter, DestVar *SequenceIter) {

	xSequenceMove(SrcVar, DestVar)

}

var xSequenceMoveRange func(*SequenceIter, *SequenceIter, *SequenceIter)

// Inserts the (@begin, @end) range at the destination pointed to by @dest.
// The @begin and @end iters must point into the same sequence. It is
// allowed for @dest to point to a different sequence than the one pointed
// into by @begin and @end.
//
// If @dest is %NULL, the range indicated by @begin and @end is
// removed from the sequence. If @dest points to a place within
// the (@begin, @end) range, the range does not move.
func SequenceMoveRange(DestVar *SequenceIter, BeginVar *SequenceIter, EndVar *SequenceIter) {

	xSequenceMoveRange(DestVar, BeginVar, EndVar)

}

var xSequenceRangeGetMidpoint func(*SequenceIter, *SequenceIter) *SequenceIter

// Finds an iterator somewhere in the range (@begin, @end). This
// iterator will be close to the middle of the range, but is not
// guaranteed to be exactly in the middle.
//
// The @begin and @end iterators must both point to the same sequence
// and @begin must come before or be equal to @end in the sequence.
func SequenceRangeGetMidpoint(BeginVar *SequenceIter, EndVar *SequenceIter) *SequenceIter {

	return xSequenceRangeGetMidpoint(BeginVar, EndVar)

}

var xSequenceRemove func(*SequenceIter)

// Removes the item pointed to by @iter. It is an error to pass the
// end iterator to this function.
//
// If the sequence has a data destroy function associated with it, this
// function is called on the data for the removed item.
func SequenceRemove(IterVar *SequenceIter) {

	xSequenceRemove(IterVar)

}

var xSequenceRemoveRange func(*SequenceIter, *SequenceIter)

// Removes all items in the (@begin, @end) range.
//
// If the sequence has a data destroy function associated with it, this
// function is called on the data for the removed items.
func SequenceRemoveRange(BeginVar *SequenceIter, EndVar *SequenceIter) {

	xSequenceRemoveRange(BeginVar, EndVar)

}

var xSequenceSet func(*SequenceIter, uintptr)

// Changes the data for the item pointed to by @iter to be @data. If
// the sequence has a data destroy function associated with it, that
// function is called on the existing data that @iter pointed to.
func SequenceSet(IterVar *SequenceIter, DataVar uintptr) {

	xSequenceSet(IterVar, DataVar)

}

var xSequenceSwap func(*SequenceIter, *SequenceIter)

// Swaps the items pointed to by @a and @b. It is allowed for @a and @b
// to point into difference sequences.
func SequenceSwap(AVar *SequenceIter, BVar *SequenceIter) {

	xSequenceSwap(AVar, BVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GLIB"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xSequenceGet, lib, "g_sequence_get")
	core.PuregoSafeRegister(&xSequenceInsertBefore, lib, "g_sequence_insert_before")
	core.PuregoSafeRegister(&xSequenceMove, lib, "g_sequence_move")
	core.PuregoSafeRegister(&xSequenceMoveRange, lib, "g_sequence_move_range")
	core.PuregoSafeRegister(&xSequenceRangeGetMidpoint, lib, "g_sequence_range_get_midpoint")
	core.PuregoSafeRegister(&xSequenceRemove, lib, "g_sequence_remove")
	core.PuregoSafeRegister(&xSequenceRemoveRange, lib, "g_sequence_remove_range")
	core.PuregoSafeRegister(&xSequenceSet, lib, "g_sequence_set")
	core.PuregoSafeRegister(&xSequenceSwap, lib, "g_sequence_swap")

}
