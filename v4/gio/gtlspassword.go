// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

// Class structure for #GTlsPassword.
type TlsPasswordClass struct {
	ParentClass uintptr

	Padding uintptr
}

type TlsPasswordPrivate struct {
}

// Holds a password used in TLS.
type TlsPassword struct {
	gobject.Object
}

func TlsPasswordNewFromInternalPtr(ptr uintptr) *TlsPassword {
	cls := &TlsPassword{}
	cls.Ptr = ptr
	return cls
}

var xNewTlsPassword func(TlsPasswordFlags, string) uintptr

// Create a new #GTlsPassword object.
func NewTlsPassword(FlagsVar TlsPasswordFlags, DescriptionVar string) *TlsPassword {
	NewTlsPasswordPtr := xNewTlsPassword(FlagsVar, DescriptionVar)
	if NewTlsPasswordPtr == 0 {
		return nil
	}

	NewTlsPasswordCls := &TlsPassword{}
	NewTlsPasswordCls.Ptr = NewTlsPasswordPtr
	return NewTlsPasswordCls
}

var xTlsPasswordGetDescription func(uintptr) string

// Get a description string about what the password will be used for.
func (x *TlsPassword) GetDescription() string {

	return xTlsPasswordGetDescription(x.GoPointer())

}

var xTlsPasswordGetFlags func(uintptr) TlsPasswordFlags

// Get flags about the password.
func (x *TlsPassword) GetFlags() TlsPasswordFlags {

	return xTlsPasswordGetFlags(x.GoPointer())

}

var xTlsPasswordGetValue func(uintptr, uint) uintptr

// Get the password value. If @length is not %NULL then it will be
// filled in with the length of the password value. (Note that the
// password value is not nul-terminated, so you can only pass %NULL
// for @length in contexts where you know the password will have a
// certain fixed length.)
func (x *TlsPassword) GetValue(LengthVar uint) uintptr {

	return xTlsPasswordGetValue(x.GoPointer(), LengthVar)

}

var xTlsPasswordGetWarning func(uintptr) string

// Get a user readable translated warning. Usually this warning is a
// representation of the password flags returned from
// g_tls_password_get_flags().
func (x *TlsPassword) GetWarning() string {

	return xTlsPasswordGetWarning(x.GoPointer())

}

var xTlsPasswordSetDescription func(uintptr, string)

// Set a description string about what the password will be used for.
func (x *TlsPassword) SetDescription(DescriptionVar string) {

	xTlsPasswordSetDescription(x.GoPointer(), DescriptionVar)

}

var xTlsPasswordSetFlags func(uintptr, TlsPasswordFlags)

// Set flags about the password.
func (x *TlsPassword) SetFlags(FlagsVar TlsPasswordFlags) {

	xTlsPasswordSetFlags(x.GoPointer(), FlagsVar)

}

var xTlsPasswordSetValue func(uintptr, uintptr, int)

// Set the value for this password. The @value will be copied by the password
// object.
//
// Specify the @length, for a non-nul-terminated password. Pass -1 as
// @length if using a nul-terminated password, and @length will be
// calculated automatically. (Note that the terminating nul is not
// considered part of the password in this case.)
func (x *TlsPassword) SetValue(ValueVar uintptr, LengthVar int) {

	xTlsPasswordSetValue(x.GoPointer(), ValueVar, LengthVar)

}

var xTlsPasswordSetValueFull func(uintptr, uintptr, int, uintptr)

// Provide the value for this password.
//
// The @value will be owned by the password object, and later freed using
// the @destroy function callback.
//
// Specify the @length, for a non-nul-terminated password. Pass -1 as
// @length if using a nul-terminated password, and @length will be
// calculated automatically. (Note that the terminating nul is not
// considered part of the password in this case.)
func (x *TlsPassword) SetValueFull(ValueVar uintptr, LengthVar int, DestroyVar glib.DestroyNotify) {

	xTlsPasswordSetValueFull(x.GoPointer(), ValueVar, LengthVar, purego.NewCallback(DestroyVar))

}

var xTlsPasswordSetWarning func(uintptr, string)

// Set a user readable translated warning. Usually this warning is a
// representation of the password flags returned from
// g_tls_password_get_flags().
func (x *TlsPassword) SetWarning(WarningVar string) {

	xTlsPasswordSetWarning(x.GoPointer(), WarningVar)

}

func (c *TlsPassword) GoPointer() uintptr {
	return c.Ptr
}

func (c *TlsPassword) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewTlsPassword, lib, "g_tls_password_new")

	core.PuregoSafeRegister(&xTlsPasswordGetDescription, lib, "g_tls_password_get_description")
	core.PuregoSafeRegister(&xTlsPasswordGetFlags, lib, "g_tls_password_get_flags")
	core.PuregoSafeRegister(&xTlsPasswordGetValue, lib, "g_tls_password_get_value")
	core.PuregoSafeRegister(&xTlsPasswordGetWarning, lib, "g_tls_password_get_warning")
	core.PuregoSafeRegister(&xTlsPasswordSetDescription, lib, "g_tls_password_set_description")
	core.PuregoSafeRegister(&xTlsPasswordSetFlags, lib, "g_tls_password_set_flags")
	core.PuregoSafeRegister(&xTlsPasswordSetValue, lib, "g_tls_password_set_value")
	core.PuregoSafeRegister(&xTlsPasswordSetValueFull, lib, "g_tls_password_set_value_full")
	core.PuregoSafeRegister(&xTlsPasswordSetWarning, lib, "g_tls_password_set_warning")

}
