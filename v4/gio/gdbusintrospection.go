// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// Information about an annotation.
type DBusAnnotationInfo struct {
	RefCount int32

	Key string

	Value string

	Annotations uintptr
}

// Information about an argument for a method or a signal.
type DBusArgInfo struct {
	RefCount int32

	Name string

	Signature string

	Annotations uintptr
}

// Information about a D-Bus interface.
type DBusInterfaceInfo struct {
	RefCount int32

	Name string

	Methods uintptr

	Signals uintptr

	Properties uintptr

	Annotations uintptr
}

// Information about a method on an D-Bus interface.
type DBusMethodInfo struct {
	RefCount int32

	Name string

	InArgs uintptr

	OutArgs uintptr

	Annotations uintptr
}

// Information about nodes in a remote object hierarchy.
type DBusNodeInfo struct {
	RefCount int32

	Path string

	Interfaces uintptr

	Nodes uintptr

	Annotations uintptr
}

// Information about a D-Bus property on a D-Bus interface.
type DBusPropertyInfo struct {
	RefCount int32

	Name string

	Signature string

	Flags DBusPropertyInfoFlags

	Annotations uintptr
}

// Information about a signal on a D-Bus interface.
type DBusSignalInfo struct {
	RefCount int32

	Name string

	Args uintptr

	Annotations uintptr
}

var xDbusAnnotationInfoLookup func(uintptr, string) string

// Looks up the value of an annotation.
//
// The cost of this function is O(n) in number of annotations.
func DbusAnnotationInfoLookup(AnnotationsVar uintptr, NameVar string) string {

	return xDbusAnnotationInfoLookup(AnnotationsVar, NameVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xDbusAnnotationInfoLookup, lib, "g_dbus_annotation_info_lookup")

}
