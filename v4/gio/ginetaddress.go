// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type InetAddressClass struct {
	ParentClass uintptr
}

type InetAddressPrivate struct {
}

// #GInetAddress represents an IPv4 or IPv6 internet address. Use
// g_resolver_lookup_by_name() or g_resolver_lookup_by_name_async() to
// look up the #GInetAddress for a hostname. Use
// g_resolver_lookup_by_address() or
// g_resolver_lookup_by_address_async() to look up the hostname for a
// #GInetAddress.
//
// To actually connect to a remote host, you will need a
// #GInetSocketAddress (which includes a #GInetAddress as well as a
// port number).
type InetAddress struct {
	gobject.Object
}

func InetAddressNewFromInternalPtr(ptr uintptr) *InetAddress {
	cls := &InetAddress{}
	cls.Ptr = ptr
	return cls
}

var xNewAnyInetAddress func(SocketFamily) uintptr

// Creates a #GInetAddress for the "any" address (unassigned/"don't
// care") for @family.
func NewAnyInetAddress(FamilyVar SocketFamily) *InetAddress {
	NewAnyInetAddressPtr := xNewAnyInetAddress(FamilyVar)
	if NewAnyInetAddressPtr == 0 {
		return nil
	}

	NewAnyInetAddressCls := &InetAddress{}
	NewAnyInetAddressCls.Ptr = NewAnyInetAddressPtr
	return NewAnyInetAddressCls
}

var xNewFromBytesInetAddress func(uintptr, SocketFamily) uintptr

// Creates a new #GInetAddress from the given @family and @bytes.
// @bytes should be 4 bytes for %G_SOCKET_FAMILY_IPV4 and 16 bytes for
// %G_SOCKET_FAMILY_IPV6.
func NewFromBytesInetAddress(BytesVar uintptr, FamilyVar SocketFamily) *InetAddress {
	NewFromBytesInetAddressPtr := xNewFromBytesInetAddress(BytesVar, FamilyVar)
	if NewFromBytesInetAddressPtr == 0 {
		return nil
	}

	NewFromBytesInetAddressCls := &InetAddress{}
	NewFromBytesInetAddressCls.Ptr = NewFromBytesInetAddressPtr
	return NewFromBytesInetAddressCls
}

var xNewFromStringInetAddress func(string) uintptr

// Parses @string as an IP address and creates a new #GInetAddress.
func NewFromStringInetAddress(StringVar string) *InetAddress {
	NewFromStringInetAddressPtr := xNewFromStringInetAddress(StringVar)
	if NewFromStringInetAddressPtr == 0 {
		return nil
	}

	NewFromStringInetAddressCls := &InetAddress{}
	NewFromStringInetAddressCls.Ptr = NewFromStringInetAddressPtr
	return NewFromStringInetAddressCls
}

var xNewLoopbackInetAddress func(SocketFamily) uintptr

// Creates a #GInetAddress for the loopback address for @family.
func NewLoopbackInetAddress(FamilyVar SocketFamily) *InetAddress {
	NewLoopbackInetAddressPtr := xNewLoopbackInetAddress(FamilyVar)
	if NewLoopbackInetAddressPtr == 0 {
		return nil
	}

	NewLoopbackInetAddressCls := &InetAddress{}
	NewLoopbackInetAddressCls.Ptr = NewLoopbackInetAddressPtr
	return NewLoopbackInetAddressCls
}

var xInetAddressEqual func(uintptr, uintptr) bool

// Checks if two #GInetAddress instances are equal, e.g. the same address.
func (x *InetAddress) Equal(OtherAddressVar *InetAddress) bool {

	return xInetAddressEqual(x.GoPointer(), OtherAddressVar.GoPointer())

}

var xInetAddressGetFamily func(uintptr) SocketFamily

// Gets @address's family
func (x *InetAddress) GetFamily() SocketFamily {

	return xInetAddressGetFamily(x.GoPointer())

}

var xInetAddressGetIsAny func(uintptr) bool

// Tests whether @address is the "any" address for its family.
func (x *InetAddress) GetIsAny() bool {

	return xInetAddressGetIsAny(x.GoPointer())

}

var xInetAddressGetIsLinkLocal func(uintptr) bool

// Tests whether @address is a link-local address (that is, if it
// identifies a host on a local network that is not connected to the
// Internet).
func (x *InetAddress) GetIsLinkLocal() bool {

	return xInetAddressGetIsLinkLocal(x.GoPointer())

}

var xInetAddressGetIsLoopback func(uintptr) bool

// Tests whether @address is the loopback address for its family.
func (x *InetAddress) GetIsLoopback() bool {

	return xInetAddressGetIsLoopback(x.GoPointer())

}

var xInetAddressGetIsMcGlobal func(uintptr) bool

// Tests whether @address is a global multicast address.
func (x *InetAddress) GetIsMcGlobal() bool {

	return xInetAddressGetIsMcGlobal(x.GoPointer())

}

var xInetAddressGetIsMcLinkLocal func(uintptr) bool

// Tests whether @address is a link-local multicast address.
func (x *InetAddress) GetIsMcLinkLocal() bool {

	return xInetAddressGetIsMcLinkLocal(x.GoPointer())

}

var xInetAddressGetIsMcNodeLocal func(uintptr) bool

// Tests whether @address is a node-local multicast address.
func (x *InetAddress) GetIsMcNodeLocal() bool {

	return xInetAddressGetIsMcNodeLocal(x.GoPointer())

}

var xInetAddressGetIsMcOrgLocal func(uintptr) bool

// Tests whether @address is an organization-local multicast address.
func (x *InetAddress) GetIsMcOrgLocal() bool {

	return xInetAddressGetIsMcOrgLocal(x.GoPointer())

}

var xInetAddressGetIsMcSiteLocal func(uintptr) bool

// Tests whether @address is a site-local multicast address.
func (x *InetAddress) GetIsMcSiteLocal() bool {

	return xInetAddressGetIsMcSiteLocal(x.GoPointer())

}

var xInetAddressGetIsMulticast func(uintptr) bool

// Tests whether @address is a multicast address.
func (x *InetAddress) GetIsMulticast() bool {

	return xInetAddressGetIsMulticast(x.GoPointer())

}

var xInetAddressGetIsSiteLocal func(uintptr) bool

// Tests whether @address is a site-local address such as 10.0.0.1
// (that is, the address identifies a host on a local network that can
// not be reached directly from the Internet, but which may have
// outgoing Internet connectivity via a NAT or firewall).
func (x *InetAddress) GetIsSiteLocal() bool {

	return xInetAddressGetIsSiteLocal(x.GoPointer())

}

var xInetAddressGetNativeSize func(uintptr) uint

// Gets the size of the native raw binary address for @address. This
// is the size of the data that you get from g_inet_address_to_bytes().
func (x *InetAddress) GetNativeSize() uint {

	return xInetAddressGetNativeSize(x.GoPointer())

}

var xInetAddressToBytes func(uintptr) byte

// Gets the raw binary address data from @address.
func (x *InetAddress) ToBytes() byte {

	return xInetAddressToBytes(x.GoPointer())

}

var xInetAddressToString func(uintptr) string

// Converts @address to string form.
func (x *InetAddress) ToString() string {

	return xInetAddressToString(x.GoPointer())

}

func (c *InetAddress) GoPointer() uintptr {
	return c.Ptr
}

func (c *InetAddress) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewAnyInetAddress, lib, "g_inet_address_new_any")
	core.PuregoSafeRegister(&xNewFromBytesInetAddress, lib, "g_inet_address_new_from_bytes")
	core.PuregoSafeRegister(&xNewFromStringInetAddress, lib, "g_inet_address_new_from_string")
	core.PuregoSafeRegister(&xNewLoopbackInetAddress, lib, "g_inet_address_new_loopback")

	core.PuregoSafeRegister(&xInetAddressEqual, lib, "g_inet_address_equal")
	core.PuregoSafeRegister(&xInetAddressGetFamily, lib, "g_inet_address_get_family")
	core.PuregoSafeRegister(&xInetAddressGetIsAny, lib, "g_inet_address_get_is_any")
	core.PuregoSafeRegister(&xInetAddressGetIsLinkLocal, lib, "g_inet_address_get_is_link_local")
	core.PuregoSafeRegister(&xInetAddressGetIsLoopback, lib, "g_inet_address_get_is_loopback")
	core.PuregoSafeRegister(&xInetAddressGetIsMcGlobal, lib, "g_inet_address_get_is_mc_global")
	core.PuregoSafeRegister(&xInetAddressGetIsMcLinkLocal, lib, "g_inet_address_get_is_mc_link_local")
	core.PuregoSafeRegister(&xInetAddressGetIsMcNodeLocal, lib, "g_inet_address_get_is_mc_node_local")
	core.PuregoSafeRegister(&xInetAddressGetIsMcOrgLocal, lib, "g_inet_address_get_is_mc_org_local")
	core.PuregoSafeRegister(&xInetAddressGetIsMcSiteLocal, lib, "g_inet_address_get_is_mc_site_local")
	core.PuregoSafeRegister(&xInetAddressGetIsMulticast, lib, "g_inet_address_get_is_multicast")
	core.PuregoSafeRegister(&xInetAddressGetIsSiteLocal, lib, "g_inet_address_get_is_site_local")
	core.PuregoSafeRegister(&xInetAddressGetNativeSize, lib, "g_inet_address_get_native_size")
	core.PuregoSafeRegister(&xInetAddressToBytes, lib, "g_inet_address_to_bytes")
	core.PuregoSafeRegister(&xInetAddressToString, lib, "g_inet_address_to_string")

}
