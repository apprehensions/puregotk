// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// vtable for a #GDtlsServerConnection implementation.
type DtlsServerConnectionInterface struct {
	GIface uintptr
}

// #GDtlsServerConnection is the server-side subclass of #GDtlsConnection,
// representing a server-side DTLS connection.
type DtlsServerConnection interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
}
type DtlsServerConnectionBase struct {
	Ptr uintptr
}

func (x *DtlsServerConnectionBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *DtlsServerConnectionBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

var xDtlsServerConnectionNew func(uintptr, uintptr) uintptr

// Creates a new #GDtlsServerConnection wrapping @base_socket.
func DtlsServerConnectionNew(BaseSocketVar DatagramBased, CertificateVar *TlsCertificate) *DtlsServerConnectionBase {

	DtlsServerConnectionNewPtr := xDtlsServerConnectionNew(BaseSocketVar.GoPointer(), CertificateVar.GoPointer())
	if DtlsServerConnectionNewPtr == 0 {
		return nil
	}

	DtlsServerConnectionNewCls := &DtlsServerConnectionBase{}
	DtlsServerConnectionNewCls.Ptr = DtlsServerConnectionNewPtr
	return DtlsServerConnectionNewCls

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xDtlsServerConnectionNew, lib, "g_dtls_server_connection_new")

}
