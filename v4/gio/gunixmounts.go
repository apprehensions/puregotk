// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

// Defines a Unix mount entry (e.g. &lt;filename&gt;/media/cdrom&lt;/filename&gt;).
// This corresponds roughly to a mtab entry.
type UnixMountEntry struct {
}

type UnixMountMonitorClass struct {
}

// Defines a Unix mount point (e.g. &lt;filename&gt;/dev&lt;/filename&gt;).
// This corresponds roughly to a fstab entry.
type UnixMountPoint struct {
}

var xUnixIsMountPathSystemInternal func(string) bool

// Determines if @mount_path is considered an implementation of the
// OS. This is primarily used for hiding mountable and mounted volumes
// that only are used in the OS and has little to no relevance to the
// casual user.
func UnixIsMountPathSystemInternal(MountPathVar string) bool {

	return xUnixIsMountPathSystemInternal(MountPathVar)

}

var xUnixIsSystemDevicePath func(string) bool

// Determines if @device_path is considered a block device path which is only
// used in implementation of the OS. This is primarily used for hiding
// mounted volumes that are intended as APIs for programs to read, and system
// administrators at a shell; rather than something that should, for example,
// appear in a GUI. For example, the Linux `/proc` filesystem.
//
// The list of device paths considered ‘system’ ones may change over time.
func UnixIsSystemDevicePath(DevicePathVar string) bool {

	return xUnixIsSystemDevicePath(DevicePathVar)

}

var xUnixIsSystemFsType func(string) bool

// Determines if @fs_type is considered a type of file system which is only
// used in implementation of the OS. This is primarily used for hiding
// mounted volumes that are intended as APIs for programs to read, and system
// administrators at a shell; rather than something that should, for example,
// appear in a GUI. For example, the Linux `/proc` filesystem.
//
// The list of file system types considered ‘system’ ones may change over time.
func UnixIsSystemFsType(FsTypeVar string) bool {

	return xUnixIsSystemFsType(FsTypeVar)

}

var xUnixMountAt func(string, uint64) *UnixMountEntry

// Gets a #GUnixMountEntry for a given mount path. If @time_read
// is set, it will be filled with a unix timestamp for checking
// if the mounts have changed since with g_unix_mounts_changed_since().
//
// If more mounts have the same mount path, the last matching mount
// is returned.
//
// This will return %NULL if there is no mount point at @mount_path.
func UnixMountAt(MountPathVar string, TimeReadVar uint64) *UnixMountEntry {

	return xUnixMountAt(MountPathVar, TimeReadVar)

}

var xUnixMountCompare func(*UnixMountEntry, *UnixMountEntry) int

// Compares two unix mounts.
func UnixMountCompare(Mount1Var *UnixMountEntry, Mount2Var *UnixMountEntry) int {

	return xUnixMountCompare(Mount1Var, Mount2Var)

}

var xUnixMountCopy func(*UnixMountEntry) *UnixMountEntry

// Makes a copy of @mount_entry.
func UnixMountCopy(MountEntryVar *UnixMountEntry) *UnixMountEntry {

	return xUnixMountCopy(MountEntryVar)

}

var xUnixMountFor func(string, uint64) *UnixMountEntry

// Gets a #GUnixMountEntry for a given file path. If @time_read
// is set, it will be filled with a unix timestamp for checking
// if the mounts have changed since with g_unix_mounts_changed_since().
//
// If more mounts have the same mount path, the last matching mount
// is returned.
//
// This will return %NULL if looking up the mount entry fails, if
// @file_path doesn’t exist or there is an I/O error.
func UnixMountFor(FilePathVar string, TimeReadVar uint64) *UnixMountEntry {

	return xUnixMountFor(FilePathVar, TimeReadVar)

}

var xUnixMountFree func(*UnixMountEntry)

// Frees a unix mount.
func UnixMountFree(MountEntryVar *UnixMountEntry) {

	xUnixMountFree(MountEntryVar)

}

var xUnixMountGetDevicePath func(*UnixMountEntry) string

// Gets the device path for a unix mount.
func UnixMountGetDevicePath(MountEntryVar *UnixMountEntry) string {

	return xUnixMountGetDevicePath(MountEntryVar)

}

var xUnixMountGetFsType func(*UnixMountEntry) string

// Gets the filesystem type for the unix mount.
func UnixMountGetFsType(MountEntryVar *UnixMountEntry) string {

	return xUnixMountGetFsType(MountEntryVar)

}

var xUnixMountGetMountPath func(*UnixMountEntry) string

// Gets the mount path for a unix mount.
func UnixMountGetMountPath(MountEntryVar *UnixMountEntry) string {

	return xUnixMountGetMountPath(MountEntryVar)

}

var xUnixMountGetOptions func(*UnixMountEntry) string

// Gets a comma-separated list of mount options for the unix mount. For example,
// `rw,relatime,seclabel,data=ordered`.
//
// This is similar to g_unix_mount_point_get_options(), but it takes
// a #GUnixMountEntry as an argument.
func UnixMountGetOptions(MountEntryVar *UnixMountEntry) string {

	return xUnixMountGetOptions(MountEntryVar)

}

var xUnixMountGetRootPath func(*UnixMountEntry) string

// Gets the root of the mount within the filesystem. This is useful e.g. for
// mounts created by bind operation, or btrfs subvolumes.
//
// For example, the root path is equal to "/" for mount created by
// "mount /dev/sda1 /mnt/foo" and "/bar" for
// "mount --bind /mnt/foo/bar /mnt/bar".
func UnixMountGetRootPath(MountEntryVar *UnixMountEntry) string {

	return xUnixMountGetRootPath(MountEntryVar)

}

var xUnixMountGuessCanEject func(*UnixMountEntry) bool

// Guesses whether a Unix mount can be ejected.
func UnixMountGuessCanEject(MountEntryVar *UnixMountEntry) bool {

	return xUnixMountGuessCanEject(MountEntryVar)

}

var xUnixMountGuessIcon func(*UnixMountEntry) uintptr

// Guesses the icon of a Unix mount.
func UnixMountGuessIcon(MountEntryVar *UnixMountEntry) *IconBase {

	UnixMountGuessIconPtr := xUnixMountGuessIcon(MountEntryVar)
	if UnixMountGuessIconPtr == 0 {
		return nil
	}

	UnixMountGuessIconCls := &IconBase{}
	UnixMountGuessIconCls.Ptr = UnixMountGuessIconPtr
	return UnixMountGuessIconCls

}

var xUnixMountGuessName func(*UnixMountEntry) string

// Guesses the name of a Unix mount.
// The result is a translated string.
func UnixMountGuessName(MountEntryVar *UnixMountEntry) string {

	return xUnixMountGuessName(MountEntryVar)

}

var xUnixMountGuessShouldDisplay func(*UnixMountEntry) bool

// Guesses whether a Unix mount should be displayed in the UI.
func UnixMountGuessShouldDisplay(MountEntryVar *UnixMountEntry) bool {

	return xUnixMountGuessShouldDisplay(MountEntryVar)

}

var xUnixMountGuessSymbolicIcon func(*UnixMountEntry) uintptr

// Guesses the symbolic icon of a Unix mount.
func UnixMountGuessSymbolicIcon(MountEntryVar *UnixMountEntry) *IconBase {

	UnixMountGuessSymbolicIconPtr := xUnixMountGuessSymbolicIcon(MountEntryVar)
	if UnixMountGuessSymbolicIconPtr == 0 {
		return nil
	}

	UnixMountGuessSymbolicIconCls := &IconBase{}
	UnixMountGuessSymbolicIconCls.Ptr = UnixMountGuessSymbolicIconPtr
	return UnixMountGuessSymbolicIconCls

}

var xUnixMountIsReadonly func(*UnixMountEntry) bool

// Checks if a unix mount is mounted read only.
func UnixMountIsReadonly(MountEntryVar *UnixMountEntry) bool {

	return xUnixMountIsReadonly(MountEntryVar)

}

var xUnixMountIsSystemInternal func(*UnixMountEntry) bool

// Checks if a Unix mount is a system mount. This is the Boolean OR of
// g_unix_is_system_fs_type(), g_unix_is_system_device_path() and
// g_unix_is_mount_path_system_internal() on @mount_entry’s properties.
//
// The definition of what a ‘system’ mount entry is may change over time as new
// file system types and device paths are ignored.
func UnixMountIsSystemInternal(MountEntryVar *UnixMountEntry) bool {

	return xUnixMountIsSystemInternal(MountEntryVar)

}

var xUnixMountPointAt func(string, uint64) *UnixMountPoint

// Gets a #GUnixMountPoint for a given mount path. If @time_read is set, it
// will be filled with a unix timestamp for checking if the mount points have
// changed since with g_unix_mount_points_changed_since().
//
// If more mount points have the same mount path, the last matching mount point
// is returned.
func UnixMountPointAt(MountPathVar string, TimeReadVar uint64) *UnixMountPoint {

	return xUnixMountPointAt(MountPathVar, TimeReadVar)

}

var xUnixMountPointsChangedSince func(uint64) bool

// Checks if the unix mount points have changed since a given unix time.
func UnixMountPointsChangedSince(TimeVar uint64) bool {

	return xUnixMountPointsChangedSince(TimeVar)

}

var xUnixMountPointsGet func(uint64) *glib.List

// Gets a #GList of #GUnixMountPoint containing the unix mount points.
// If @time_read is set, it will be filled with the mount timestamp,
// allowing for checking if the mounts have changed with
// g_unix_mount_points_changed_since().
func UnixMountPointsGet(TimeReadVar uint64) *glib.List {

	return xUnixMountPointsGet(TimeReadVar)

}

var xUnixMountsChangedSince func(uint64) bool

// Checks if the unix mounts have changed since a given unix time.
func UnixMountsChangedSince(TimeVar uint64) bool {

	return xUnixMountsChangedSince(TimeVar)

}

var xUnixMountsGet func(uint64) *glib.List

// Gets a #GList of #GUnixMountEntry containing the unix mounts.
// If @time_read is set, it will be filled with the mount
// timestamp, allowing for checking if the mounts have changed
// with g_unix_mounts_changed_since().
func UnixMountsGet(TimeReadVar uint64) *glib.List {

	return xUnixMountsGet(TimeReadVar)

}

// Watches #GUnixMounts for changes.
type UnixMountMonitor struct {
	gobject.Object
}

func UnixMountMonitorNewFromInternalPtr(ptr uintptr) *UnixMountMonitor {
	cls := &UnixMountMonitor{}
	cls.Ptr = ptr
	return cls
}

var xNewUnixMountMonitor func() uintptr

// Deprecated alias for g_unix_mount_monitor_get().
//
// This function was never a true constructor, which is why it was
// renamed.
func NewUnixMountMonitor() *UnixMountMonitor {
	NewUnixMountMonitorPtr := xNewUnixMountMonitor()
	if NewUnixMountMonitorPtr == 0 {
		return nil
	}

	NewUnixMountMonitorCls := &UnixMountMonitor{}
	NewUnixMountMonitorCls.Ptr = NewUnixMountMonitorPtr
	return NewUnixMountMonitorCls
}

var xUnixMountMonitorSetRateLimit func(uintptr, int)

// This function does nothing.
//
// Before 2.44, this was a partially-effective way of controlling the
// rate at which events would be reported under some uncommon
// circumstances.  Since @mount_monitor is a singleton, it also meant
// that calling this function would have side effects for other users of
// the monitor.
func (x *UnixMountMonitor) SetRateLimit(LimitMsecVar int) {

	xUnixMountMonitorSetRateLimit(x.GoPointer(), LimitMsecVar)

}

func (c *UnixMountMonitor) GoPointer() uintptr {
	return c.Ptr
}

func (c *UnixMountMonitor) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted when the unix mount points have changed.
func (x *UnixMountMonitor) ConnectMountpointsChanged(cb func(UnixMountMonitor)) {
	fcb := func(clsPtr uintptr) {
		fa := UnixMountMonitor{}
		fa.Ptr = clsPtr

		cb(fa)

	}
	gobject.ObjectConnect(x.GoPointer(), "signal::mountpoints-changed", purego.NewCallback(fcb))
}

// Emitted when the unix mounts have changed.
func (x *UnixMountMonitor) ConnectMountsChanged(cb func(UnixMountMonitor)) {
	fcb := func(clsPtr uintptr) {
		fa := UnixMountMonitor{}
		fa.Ptr = clsPtr

		cb(fa)

	}
	gobject.ObjectConnect(x.GoPointer(), "signal::mounts-changed", purego.NewCallback(fcb))
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xUnixIsMountPathSystemInternal, lib, "g_unix_is_mount_path_system_internal")
	core.PuregoSafeRegister(&xUnixIsSystemDevicePath, lib, "g_unix_is_system_device_path")
	core.PuregoSafeRegister(&xUnixIsSystemFsType, lib, "g_unix_is_system_fs_type")
	core.PuregoSafeRegister(&xUnixMountAt, lib, "g_unix_mount_at")
	core.PuregoSafeRegister(&xUnixMountCompare, lib, "g_unix_mount_compare")
	core.PuregoSafeRegister(&xUnixMountCopy, lib, "g_unix_mount_copy")
	core.PuregoSafeRegister(&xUnixMountFor, lib, "g_unix_mount_for")
	core.PuregoSafeRegister(&xUnixMountFree, lib, "g_unix_mount_free")
	core.PuregoSafeRegister(&xUnixMountGetDevicePath, lib, "g_unix_mount_get_device_path")
	core.PuregoSafeRegister(&xUnixMountGetFsType, lib, "g_unix_mount_get_fs_type")
	core.PuregoSafeRegister(&xUnixMountGetMountPath, lib, "g_unix_mount_get_mount_path")
	core.PuregoSafeRegister(&xUnixMountGetOptions, lib, "g_unix_mount_get_options")
	core.PuregoSafeRegister(&xUnixMountGetRootPath, lib, "g_unix_mount_get_root_path")
	core.PuregoSafeRegister(&xUnixMountGuessCanEject, lib, "g_unix_mount_guess_can_eject")
	core.PuregoSafeRegister(&xUnixMountGuessIcon, lib, "g_unix_mount_guess_icon")
	core.PuregoSafeRegister(&xUnixMountGuessName, lib, "g_unix_mount_guess_name")
	core.PuregoSafeRegister(&xUnixMountGuessShouldDisplay, lib, "g_unix_mount_guess_should_display")
	core.PuregoSafeRegister(&xUnixMountGuessSymbolicIcon, lib, "g_unix_mount_guess_symbolic_icon")
	core.PuregoSafeRegister(&xUnixMountIsReadonly, lib, "g_unix_mount_is_readonly")
	core.PuregoSafeRegister(&xUnixMountIsSystemInternal, lib, "g_unix_mount_is_system_internal")
	core.PuregoSafeRegister(&xUnixMountPointAt, lib, "g_unix_mount_point_at")
	core.PuregoSafeRegister(&xUnixMountPointsChangedSince, lib, "g_unix_mount_points_changed_since")
	core.PuregoSafeRegister(&xUnixMountPointsGet, lib, "g_unix_mount_points_get")
	core.PuregoSafeRegister(&xUnixMountsChangedSince, lib, "g_unix_mounts_changed_since")
	core.PuregoSafeRegister(&xUnixMountsGet, lib, "g_unix_mounts_get")

	core.PuregoSafeRegister(&xNewUnixMountMonitor, lib, "g_unix_mount_monitor_new")

	core.PuregoSafeRegister(&xUnixMountMonitorSetRateLimit, lib, "g_unix_mount_monitor_set_rate_limit")

}
