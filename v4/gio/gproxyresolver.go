// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

// The virtual function table for #GProxyResolver.
type ProxyResolverInterface struct {
	GIface uintptr
}

// #GProxyResolver provides synchronous and asynchronous network proxy
// resolution. #GProxyResolver is used within #GSocketClient through
// the method g_socket_connectable_proxy_enumerate().
//
// Implementations of #GProxyResolver based on libproxy and GNOME settings can
// be found in glib-networking. GIO comes with an implementation for use inside
// Flatpak portals.
type ProxyResolver interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	IsSupported() bool
	Lookup(UriVar string, CancellableVar *Cancellable) uintptr
	LookupAsync(UriVar string, CancellableVar *Cancellable, CallbackVar AsyncReadyCallback, UserDataVar uintptr)
	LookupFinish(ResultVar AsyncResult) uintptr
}
type ProxyResolverBase struct {
	Ptr uintptr
}

func (x *ProxyResolverBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *ProxyResolverBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Checks if @resolver can be used on this system. (This is used
// internally; g_proxy_resolver_get_default() will only return a proxy
// resolver that returns %TRUE for this method.)
func (x *ProxyResolverBase) IsSupported() bool {

	return XGProxyResolverIsSupported(x.GoPointer())

}

// Looks into the system proxy configuration to determine what proxy,
// if any, to use to connect to @uri. The returned proxy URIs are of
// the form `&lt;protocol&gt;://[user[:password]@]host:port` or
// `direct://`, where &lt;protocol&gt; could be http, rtsp, socks
// or other proxying protocol.
//
// If you don't know what network protocol is being used on the
// socket, you should use `none` as the URI protocol.
// In this case, the resolver might still return a generic proxy type
// (such as SOCKS), but would not return protocol-specific proxy types
// (such as http).
//
// `direct://` is used when no proxy is needed.
// Direct connection should not be attempted unless it is part of the
// returned array of proxies.
func (x *ProxyResolverBase) Lookup(UriVar string, CancellableVar *Cancellable) uintptr {

	return XGProxyResolverLookup(x.GoPointer(), UriVar, CancellableVar.GoPointer())

}

// Asynchronous lookup of proxy. See g_proxy_resolver_lookup() for more
// details.
func (x *ProxyResolverBase) LookupAsync(UriVar string, CancellableVar *Cancellable, CallbackVar AsyncReadyCallback, UserDataVar uintptr) {

	XGProxyResolverLookupAsync(x.GoPointer(), UriVar, CancellableVar.GoPointer(), purego.NewCallback(CallbackVar), UserDataVar)

}

// Call this function to obtain the array of proxy URIs when
// g_proxy_resolver_lookup_async() is complete. See
// g_proxy_resolver_lookup() for more details.
func (x *ProxyResolverBase) LookupFinish(ResultVar AsyncResult) uintptr {

	return XGProxyResolverLookupFinish(x.GoPointer(), ResultVar.GoPointer())

}

var XGProxyResolverIsSupported func(uintptr) bool
var XGProxyResolverLookup func(uintptr, string, uintptr) uintptr
var XGProxyResolverLookupAsync func(uintptr, string, uintptr, uintptr, uintptr)
var XGProxyResolverLookupFinish func(uintptr, uintptr) uintptr

var xProxyResolverGetDefault func() uintptr

// Gets the default #GProxyResolver for the system.
func ProxyResolverGetDefault() *ProxyResolverBase {

	ProxyResolverGetDefaultPtr := xProxyResolverGetDefault()
	if ProxyResolverGetDefaultPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(ProxyResolverGetDefaultPtr)

	ProxyResolverGetDefaultCls := &ProxyResolverBase{}
	ProxyResolverGetDefaultCls.Ptr = ProxyResolverGetDefaultPtr
	return ProxyResolverGetDefaultCls

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xProxyResolverGetDefault, lib, "g_proxy_resolver_get_default")

	core.PuregoSafeRegister(&XGProxyResolverIsSupported, lib, "g_proxy_resolver_is_supported")
	core.PuregoSafeRegister(&XGProxyResolverLookup, lib, "g_proxy_resolver_lookup")
	core.PuregoSafeRegister(&XGProxyResolverLookupAsync, lib, "g_proxy_resolver_lookup_async")
	core.PuregoSafeRegister(&XGProxyResolverLookupFinish, lib, "g_proxy_resolver_lookup_finish")

}
