// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type FilenameCompleterClass struct {
	ParentClass uintptr
}

// Completes partial file and directory names given a partial string by
// looking in the file system for clues. Can return a list of possible
// completion strings for widget implementations.
type FilenameCompleter struct {
	gobject.Object
}

func FilenameCompleterNewFromInternalPtr(ptr uintptr) *FilenameCompleter {
	cls := &FilenameCompleter{}
	cls.Ptr = ptr
	return cls
}

var xNewFilenameCompleter func() uintptr

// Creates a new filename completer.
func NewFilenameCompleter() *FilenameCompleter {
	var cls *FilenameCompleter

	cret := xNewFilenameCompleter()

	if cret == 0 {
		return cls
	}
	cls = &FilenameCompleter{}
	cls.Ptr = cret
	return cls
}

var xFilenameCompleterGetCompletionSuffix func(uintptr, string) string

// Obtains a completion for @initial_text from @completer.
func (x *FilenameCompleter) GetCompletionSuffix(InitialTextVar string) string {

	cret := xFilenameCompleterGetCompletionSuffix(x.GoPointer(), InitialTextVar)
	return cret
}

var xFilenameCompleterGetCompletions func(uintptr, string) []string

// Gets an array of completion strings for a given initial text.
func (x *FilenameCompleter) GetCompletions(InitialTextVar string) []string {

	cret := xFilenameCompleterGetCompletions(x.GoPointer(), InitialTextVar)
	return cret
}

var xFilenameCompleterSetDirsOnly func(uintptr, bool)

// If @dirs_only is %TRUE, @completer will only
// complete directory names, and not file names.
func (x *FilenameCompleter) SetDirsOnly(DirsOnlyVar bool) {

	xFilenameCompleterSetDirsOnly(x.GoPointer(), DirsOnlyVar)

}

func (c *FilenameCompleter) GoPointer() uintptr {
	return c.Ptr
}

func (c *FilenameCompleter) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Emitted when the file name completion information comes available.
func (x *FilenameCompleter) ConnectGotCompletionData(cb func(FilenameCompleter)) {
	fcb := func(clsPtr uintptr) {
		fa := FilenameCompleter{}
		fa.Ptr = clsPtr

		cb(fa)

	}
	gobject.ObjectConnect(x.GoPointer(), "signal::got-completion-data", purego.NewCallback(fcb))
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewFilenameCompleter, lib, "g_filename_completer_new")

	core.PuregoSafeRegister(&xFilenameCompleterGetCompletionSuffix, lib, "g_filename_completer_get_completion_suffix")
	core.PuregoSafeRegister(&xFilenameCompleterGetCompletions, lib, "g_filename_completer_get_completions")
	core.PuregoSafeRegister(&xFilenameCompleterSetDirsOnly, lib, "g_filename_completer_set_dirs_only")

}
