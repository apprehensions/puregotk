// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type InetSocketAddressClass struct {
	ParentClass uintptr
}

type InetSocketAddressPrivate struct {
}

// An IPv4 or IPv6 socket address; that is, the combination of a
// #GInetAddress and a port number.
type InetSocketAddress struct {
	SocketAddress
}

func InetSocketAddressNewFromInternalPtr(ptr uintptr) *InetSocketAddress {
	cls := &InetSocketAddress{}
	cls.Ptr = ptr
	return cls
}

var xNewInetSocketAddress func(uintptr, uint16) uintptr

// Creates a new #GInetSocketAddress for @address and @port.
func NewInetSocketAddress(AddressVar *InetAddress, PortVar uint16) *SocketAddress {
	NewInetSocketAddressPtr := xNewInetSocketAddress(AddressVar.GoPointer(), PortVar)
	if NewInetSocketAddressPtr == 0 {
		return nil
	}

	NewInetSocketAddressCls := &SocketAddress{}
	NewInetSocketAddressCls.Ptr = NewInetSocketAddressPtr
	return NewInetSocketAddressCls
}

var xNewFromStringInetSocketAddress func(string, uint) uintptr

// Creates a new #GInetSocketAddress for @address and @port.
//
// If @address is an IPv6 address, it can also contain a scope ID
// (separated from the address by a `%`).
func NewFromStringInetSocketAddress(AddressVar string, PortVar uint) *SocketAddress {
	NewFromStringInetSocketAddressPtr := xNewFromStringInetSocketAddress(AddressVar, PortVar)
	if NewFromStringInetSocketAddressPtr == 0 {
		return nil
	}

	NewFromStringInetSocketAddressCls := &SocketAddress{}
	NewFromStringInetSocketAddressCls.Ptr = NewFromStringInetSocketAddressPtr
	return NewFromStringInetSocketAddressCls
}

var xInetSocketAddressGetAddress func(uintptr) uintptr

// Gets @address's #GInetAddress.
func (x *InetSocketAddress) GetAddress() *InetAddress {

	GetAddressPtr := xInetSocketAddressGetAddress(x.GoPointer())
	if GetAddressPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetAddressPtr)

	GetAddressCls := &InetAddress{}
	GetAddressCls.Ptr = GetAddressPtr
	return GetAddressCls

}

var xInetSocketAddressGetFlowinfo func(uintptr) uint32

// Gets the `sin6_flowinfo` field from @address,
// which must be an IPv6 address.
func (x *InetSocketAddress) GetFlowinfo() uint32 {

	return xInetSocketAddressGetFlowinfo(x.GoPointer())

}

var xInetSocketAddressGetPort func(uintptr) uint16

// Gets @address's port.
func (x *InetSocketAddress) GetPort() uint16 {

	return xInetSocketAddressGetPort(x.GoPointer())

}

var xInetSocketAddressGetScopeId func(uintptr) uint32

// Gets the `sin6_scope_id` field from @address,
// which must be an IPv6 address.
func (x *InetSocketAddress) GetScopeId() uint32 {

	return xInetSocketAddressGetScopeId(x.GoPointer())

}

func (c *InetSocketAddress) GoPointer() uintptr {
	return c.Ptr
}

func (c *InetSocketAddress) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Creates a #GSocketAddressEnumerator for @connectable.
func (x *InetSocketAddress) Enumerate() *SocketAddressEnumerator {

	EnumeratePtr := XGSocketConnectableEnumerate(x.GoPointer())
	if EnumeratePtr == 0 {
		return nil
	}

	EnumerateCls := &SocketAddressEnumerator{}
	EnumerateCls.Ptr = EnumeratePtr
	return EnumerateCls

}

// Creates a #GSocketAddressEnumerator for @connectable that will
// return a #GProxyAddress for each of its addresses that you must connect
// to via a proxy.
//
// If @connectable does not implement
// g_socket_connectable_proxy_enumerate(), this will fall back to
// calling g_socket_connectable_enumerate().
func (x *InetSocketAddress) ProxyEnumerate() *SocketAddressEnumerator {

	ProxyEnumeratePtr := XGSocketConnectableProxyEnumerate(x.GoPointer())
	if ProxyEnumeratePtr == 0 {
		return nil
	}

	ProxyEnumerateCls := &SocketAddressEnumerator{}
	ProxyEnumerateCls.Ptr = ProxyEnumeratePtr
	return ProxyEnumerateCls

}

// Format a #GSocketConnectable as a string. This is a human-readable format for
// use in debugging output, and is not a stable serialization format. It is not
// suitable for use in user interfaces as it exposes too much information for a
// user.
//
// If the #GSocketConnectable implementation does not support string formatting,
// the implementationâ€™s type name will be returned as a fallback.
func (x *InetSocketAddress) ToString() string {

	return XGSocketConnectableToString(x.GoPointer())

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewInetSocketAddress, lib, "g_inet_socket_address_new")
	core.PuregoSafeRegister(&xNewFromStringInetSocketAddress, lib, "g_inet_socket_address_new_from_string")

	core.PuregoSafeRegister(&xInetSocketAddressGetAddress, lib, "g_inet_socket_address_get_address")
	core.PuregoSafeRegister(&xInetSocketAddressGetFlowinfo, lib, "g_inet_socket_address_get_flowinfo")
	core.PuregoSafeRegister(&xInetSocketAddressGetPort, lib, "g_inet_socket_address_get_port")
	core.PuregoSafeRegister(&xInetSocketAddressGetScopeId, lib, "g_inet_socket_address_get_scope_id")

}
