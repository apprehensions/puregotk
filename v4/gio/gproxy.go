// Package gio was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gio

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// Provides an interface for handling proxy connection and payload.
type ProxyInterface struct {
	GIface uintptr
}

// A #GProxy handles connecting to a remote host via a given type of
// proxy server. It is implemented by the 'gio-proxy' extension point.
// The extensions are named after their proxy protocol name. As an
// example, a SOCKS5 proxy implementation can be retrieved with the
// name 'socks5' using the function
// g_io_extension_point_get_extension_by_name().
type Proxy interface {
	GoPointer() uintptr
	SetGoPointer(uintptr)
	Connect(ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable) *IOStream
	ConnectAsync(ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable, CallbackVar AsyncReadyCallback, UserDataVar uintptr)
	ConnectFinish(ResultVar AsyncResult) *IOStream
	SupportsHostname() bool
}
type ProxyBase struct {
	Ptr uintptr
}

func (x *ProxyBase) GoPointer() uintptr {
	return x.Ptr
}

func (x *ProxyBase) SetGoPointer(ptr uintptr) {
	x.Ptr = ptr
}

// Given @connection to communicate with a proxy (eg, a
// #GSocketConnection that is connected to the proxy server), this
// does the necessary handshake to connect to @proxy_address, and if
// required, wraps the #GIOStream to handle proxy payload.
func (x *ProxyBase) Connect(ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable) *IOStream {

	ConnectPtr := XGProxyConnect(x.GoPointer(), ConnectionVar.GoPointer(), ProxyAddressVar.GoPointer(), CancellableVar.GoPointer())
	if ConnectPtr == 0 {
		return nil
	}

	ConnectCls := &IOStream{}
	ConnectCls.Ptr = ConnectPtr
	return ConnectCls

}

// Asynchronous version of g_proxy_connect().
func (x *ProxyBase) ConnectAsync(ConnectionVar *IOStream, ProxyAddressVar *ProxyAddress, CancellableVar *Cancellable, CallbackVar AsyncReadyCallback, UserDataVar uintptr) {

	XGProxyConnectAsync(x.GoPointer(), ConnectionVar.GoPointer(), ProxyAddressVar.GoPointer(), CancellableVar.GoPointer(), purego.NewCallback(CallbackVar), UserDataVar)

}

// See g_proxy_connect().
func (x *ProxyBase) ConnectFinish(ResultVar AsyncResult) *IOStream {

	ConnectFinishPtr := XGProxyConnectFinish(x.GoPointer(), ResultVar.GoPointer())
	if ConnectFinishPtr == 0 {
		return nil
	}

	ConnectFinishCls := &IOStream{}
	ConnectFinishCls.Ptr = ConnectFinishPtr
	return ConnectFinishCls

}

// Some proxy protocols expect to be passed a hostname, which they
// will resolve to an IP address themselves. Others, like SOCKS4, do
// not allow this. This function will return %FALSE if @proxy is
// implementing such a protocol. When %FALSE is returned, the caller
// should resolve the destination hostname first, and then pass a
// #GProxyAddress containing the stringified IP address to
// g_proxy_connect() or g_proxy_connect_async().
func (x *ProxyBase) SupportsHostname() bool {

	return XGProxySupportsHostname(x.GoPointer())

}

var XGProxyConnect func(uintptr, uintptr, uintptr, uintptr) uintptr
var XGProxyConnectAsync func(uintptr, uintptr, uintptr, uintptr, uintptr, uintptr)
var XGProxyConnectFinish func(uintptr, uintptr) uintptr
var XGProxySupportsHostname func(uintptr) bool

var xProxyGetDefaultForProtocol func(string) uintptr

// Find the `gio-proxy` extension point for a proxy implementation that supports
// the specified protocol.
func ProxyGetDefaultForProtocol(ProtocolVar string) *ProxyBase {

	ProxyGetDefaultForProtocolPtr := xProxyGetDefaultForProtocol(ProtocolVar)
	if ProxyGetDefaultForProtocolPtr == 0 {
		return nil
	}

	ProxyGetDefaultForProtocolCls := &ProxyBase{}
	ProxyGetDefaultForProtocolCls.Ptr = ProxyGetDefaultForProtocolPtr
	return ProxyGetDefaultForProtocolCls

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GIO"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xProxyGetDefaultForProtocol, lib, "g_proxy_get_default_for_protocol")

	core.PuregoSafeRegister(&XGProxyConnect, lib, "g_proxy_connect")
	core.PuregoSafeRegister(&XGProxyConnectAsync, lib, "g_proxy_connect_async")
	core.PuregoSafeRegister(&XGProxyConnectFinish, lib, "g_proxy_connect_finish")
	core.PuregoSafeRegister(&XGProxySupportsHostname, lib, "g_proxy_supports_hostname")

}
