// Package gobject was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gobject

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// The type of value transformation functions which can be registered with
// g_value_register_transform_func().
//
// @dest_value will be initialized to the correct destination type.
type ValueTransform func(*Value, *Value)

// An opaque structure used to hold different types of values.
//
// The data within the structure has protected scope: it is accessible only
// to functions within a #GTypeValueTable structure, or implementations of
// the g_value_*() API. That is, code portions which implement new fundamental
// types.
//
// #GValue users cannot make any assumptions about how data is stored
// within the 2 element @data union, and the @g_type member should
// only be accessed through the G_VALUE_TYPE() macro.
type Value struct {
	GType []interface{}

	Data uintptr
}

var xValueRegisterTransformFunc func([]interface{}, []interface{}, uintptr)

// Registers a value transformation function for use in g_value_transform().
// A previously registered transformation function for @src_type and @dest_type
// will be replaced.
func ValueRegisterTransformFunc(SrcTypeVar []interface{}, DestTypeVar []interface{}, TransformFuncVar ValueTransform) {

	xValueRegisterTransformFunc(SrcTypeVar, DestTypeVar, purego.NewCallback(TransformFuncVar))

}

var xValueTypeCompatible func([]interface{}, []interface{}) bool

// Returns whether a #GValue of type @src_type can be copied into
// a #GValue of type @dest_type.
func ValueTypeCompatible(SrcTypeVar []interface{}, DestTypeVar []interface{}) bool {

	cret := xValueTypeCompatible(SrcTypeVar, DestTypeVar)
	return cret
}

var xValueTypeTransformable func([]interface{}, []interface{}) bool

// Check whether g_value_transform() is able to transform values
// of type @src_type into values of type @dest_type. Note that for
// the types to be transformable, they must be compatible or a
// transformation function must be registered.
func ValueTypeTransformable(SrcTypeVar []interface{}, DestTypeVar []interface{}) bool {

	cret := xValueTypeTransformable(SrcTypeVar, DestTypeVar)
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GOBJECT"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xValueRegisterTransformFunc, lib, "g_value_register_transform_func")
	core.PuregoSafeRegister(&xValueTypeCompatible, lib, "g_value_type_compatible")
	core.PuregoSafeRegister(&xValueTypeTransformable, lib, "g_value_type_transformable")

}
