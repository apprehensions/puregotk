// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gsk"
	"github.com/jwijenbergh/puregotk/v4/gtk"
)

type PreferencesWindowClass struct {
	ParentClass uintptr

	Padding uintptr
}

// A window to present an application's preferences.
//
// &lt;picture&gt;
//
//	&lt;source srcset="preferences-window-dark.png" media="(prefers-color-scheme: dark)"&gt;
//	&lt;img src="preferences-window.png" alt="preferences-window"&gt;
//
// &lt;/picture&gt;
//
// The `AdwPreferencesWindow` widget presents an application's preferences
// gathered into pages and groups. The preferences are searchable by the user.
//
// ## CSS nodes
//
// `AdwPreferencesWindow` has a main CSS node with the name `window` and the
// style class `.preferences`.
type PreferencesWindow struct {
	Window
}

func PreferencesWindowNewFromInternalPtr(ptr uintptr) *PreferencesWindow {
	cls := &PreferencesWindow{}
	cls.Ptr = ptr
	return cls
}

var xNewPreferencesWindow func() uintptr

// Creates a new `AdwPreferencesWindow`.
func NewPreferencesWindow() *gtk.Widget {
	NewPreferencesWindowPtr := xNewPreferencesWindow()
	if NewPreferencesWindowPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(NewPreferencesWindowPtr)

	NewPreferencesWindowCls := &gtk.Widget{}
	NewPreferencesWindowCls.Ptr = NewPreferencesWindowPtr
	return NewPreferencesWindowCls
}

var xPreferencesWindowAdd func(uintptr, uintptr)

// Adds a preferences page to @self.
func (x *PreferencesWindow) Add(PageVar *PreferencesPage) {

	xPreferencesWindowAdd(x.GoPointer(), PageVar.GoPointer())

}

var xPreferencesWindowAddToast func(uintptr, uintptr)

// Displays @toast.
//
// See [method@ToastOverlay.add_toast].
func (x *PreferencesWindow) AddToast(ToastVar *Toast) {

	xPreferencesWindowAddToast(x.GoPointer(), ToastVar.GoPointer())

}

var xPreferencesWindowCloseSubpage func(uintptr)

// Closes the current subpage.
//
// If there is no presented subpage, this does nothing.
func (x *PreferencesWindow) CloseSubpage() {

	xPreferencesWindowCloseSubpage(x.GoPointer())

}

var xPreferencesWindowGetCanNavigateBack func(uintptr) bool

// Gets whether gestures and shortcuts for closing subpages are enabled.
func (x *PreferencesWindow) GetCanNavigateBack() bool {

	return xPreferencesWindowGetCanNavigateBack(x.GoPointer())

}

var xPreferencesWindowGetSearchEnabled func(uintptr) bool

// Gets whether search is enabled for @self.
func (x *PreferencesWindow) GetSearchEnabled() bool {

	return xPreferencesWindowGetSearchEnabled(x.GoPointer())

}

var xPreferencesWindowGetVisiblePage func(uintptr) uintptr

// Gets the currently visible page of @self.
func (x *PreferencesWindow) GetVisiblePage() *PreferencesPage {

	GetVisiblePagePtr := xPreferencesWindowGetVisiblePage(x.GoPointer())
	if GetVisiblePagePtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetVisiblePagePtr)

	GetVisiblePageCls := &PreferencesPage{}
	GetVisiblePageCls.Ptr = GetVisiblePagePtr
	return GetVisiblePageCls

}

var xPreferencesWindowGetVisiblePageName func(uintptr) string

// Gets the name of currently visible page of @self.
func (x *PreferencesWindow) GetVisiblePageName() string {

	return xPreferencesWindowGetVisiblePageName(x.GoPointer())

}

var xPreferencesWindowPresentSubpage func(uintptr, uintptr)

// Sets @subpage as the window's subpage and opens it.
//
// The transition can be cancelled by the user, in which case visible child will
// change back to the previously visible child.
func (x *PreferencesWindow) PresentSubpage(SubpageVar *gtk.Widget) {

	xPreferencesWindowPresentSubpage(x.GoPointer(), SubpageVar.GoPointer())

}

var xPreferencesWindowRemove func(uintptr, uintptr)

// Removes a page from @self.
func (x *PreferencesWindow) Remove(PageVar *PreferencesPage) {

	xPreferencesWindowRemove(x.GoPointer(), PageVar.GoPointer())

}

var xPreferencesWindowSetCanNavigateBack func(uintptr, bool)

// Sets whether gestures and shortcuts for closing subpages are enabled.
//
// The supported gestures are:
//
// - One-finger swipe on touchscreens
// - Horizontal scrolling on touchpads (usually two-finger swipe)
// - Back mouse button
//
// The keyboard back key is also supported, as well as the
// &lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;‚Üê&lt;/kbd&gt; shortcut.
//
// For right-to-left locales, gestures and shortcuts are reversed.
func (x *PreferencesWindow) SetCanNavigateBack(CanNavigateBackVar bool) {

	xPreferencesWindowSetCanNavigateBack(x.GoPointer(), CanNavigateBackVar)

}

var xPreferencesWindowSetSearchEnabled func(uintptr, bool)

// Sets whether search is enabled for @self.
func (x *PreferencesWindow) SetSearchEnabled(SearchEnabledVar bool) {

	xPreferencesWindowSetSearchEnabled(x.GoPointer(), SearchEnabledVar)

}

var xPreferencesWindowSetVisiblePage func(uintptr, uintptr)

// Makes @page the visible page of @self.
func (x *PreferencesWindow) SetVisiblePage(PageVar *PreferencesPage) {

	xPreferencesWindowSetVisiblePage(x.GoPointer(), PageVar.GoPointer())

}

var xPreferencesWindowSetVisiblePageName func(uintptr, string)

// Makes the page with the given name visible.
//
// See [property@ViewStack:visible-child].
func (x *PreferencesWindow) SetVisiblePageName(NameVar string) {

	xPreferencesWindowSetVisiblePageName(x.GoPointer(), NameVar)

}

func (c *PreferencesWindow) GoPointer() uintptr {
	return c.Ptr
}

func (c *PreferencesWindow) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *PreferencesWindow) GetAccessibleRole() gtk.AccessibleRole {

	return gtk.XGtkAccessibleGetAccessibleRole(x.GoPointer())

}

// Resets the accessible @property to its default value.
func (x *PreferencesWindow) ResetProperty(PropertyVar gtk.AccessibleProperty) {

	gtk.XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *PreferencesWindow) ResetRelation(RelationVar gtk.AccessibleRelation) {

	gtk.XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *PreferencesWindow) ResetState(StateVar gtk.AccessibleState) {

	gtk.XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *PreferencesWindow) UpdateProperty(FirstPropertyVar gtk.AccessibleProperty, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PreferencesWindow) UpdatePropertyValue(NPropertiesVar int32, PropertiesVar uintptr, ValuesVar uintptr) {

	gtk.XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *PreferencesWindow) UpdateRelation(FirstRelationVar gtk.AccessibleRelation, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PreferencesWindow) UpdateRelationValue(NRelationsVar int32, RelationsVar uintptr, ValuesVar uintptr) {

	gtk.XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *PreferencesWindow) UpdateState(FirstStateVar gtk.AccessibleState, varArgs ...interface{}) {

	gtk.XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *PreferencesWindow) UpdateStateValue(NStatesVar int32, StatesVar uintptr, ValuesVar uintptr) {

	gtk.XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *PreferencesWindow) GetBuildableId() string {

	return gtk.XGtkBuildableGetBuildableId(x.GoPointer())

}

// Returns the renderer that is used for this `GtkNative`.
func (x *PreferencesWindow) GetRenderer() *gsk.Renderer {

	GetRendererPtr := gtk.XGtkNativeGetRenderer(x.GoPointer())
	if GetRendererPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetRendererPtr)

	GetRendererCls := &gsk.Renderer{}
	GetRendererCls.Ptr = GetRendererPtr
	return GetRendererCls

}

// Returns the surface of this `GtkNative`.
func (x *PreferencesWindow) GetSurface() *gdk.Surface {

	GetSurfacePtr := gtk.XGtkNativeGetSurface(x.GoPointer())
	if GetSurfacePtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetSurfacePtr)

	GetSurfaceCls := &gdk.Surface{}
	GetSurfaceCls.Ptr = GetSurfacePtr
	return GetSurfaceCls

}

// Retrieves the surface transform of @self.
//
// This is the translation from @self's surface coordinates into
// @self's widget coordinates.
func (x *PreferencesWindow) GetSurfaceTransform(XVar float64, YVar float64) {

	gtk.XGtkNativeGetSurfaceTransform(x.GoPointer(), XVar, YVar)

}

// Realizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *PreferencesWindow) Realize() {

	gtk.XGtkNativeRealize(x.GoPointer())

}

// Unrealizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *PreferencesWindow) Unrealize() {

	gtk.XGtkNativeUnrealize(x.GoPointer())

}

// Returns the display that this `GtkRoot` is on.
func (x *PreferencesWindow) GetDisplay() *gdk.Display {

	GetDisplayPtr := gtk.XGtkRootGetDisplay(x.GoPointer())
	if GetDisplayPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetDisplayPtr)

	GetDisplayCls := &gdk.Display{}
	GetDisplayCls.Ptr = GetDisplayPtr
	return GetDisplayCls

}

// Retrieves the current focused widget within the root.
//
// Note that this is the widget that would have the focus
// if the root is active; if the root is not focused then
// `gtk_widget_has_focus (widget)` will be %FALSE for the
// widget.
func (x *PreferencesWindow) GetFocus() *gtk.Widget {

	GetFocusPtr := gtk.XGtkRootGetFocus(x.GoPointer())
	if GetFocusPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetFocusPtr)

	GetFocusCls := &gtk.Widget{}
	GetFocusCls.Ptr = GetFocusPtr
	return GetFocusCls

}

// If @focus is not the current focus widget, and is focusable, sets
// it as the focus widget for the root.
//
// If @focus is %NULL, unsets the focus widget for the root.
//
// To set the focus to a particular widget in the root, it is usually
// more convenient to use [method@Gtk.Widget.grab_focus] instead of
// this function.
func (x *PreferencesWindow) SetFocus(FocusVar *gtk.Widget) {

	gtk.XGtkRootSetFocus(x.GoPointer(), FocusVar.GoPointer())

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewPreferencesWindow, lib, "adw_preferences_window_new")

	core.PuregoSafeRegister(&xPreferencesWindowAdd, lib, "adw_preferences_window_add")
	core.PuregoSafeRegister(&xPreferencesWindowAddToast, lib, "adw_preferences_window_add_toast")
	core.PuregoSafeRegister(&xPreferencesWindowCloseSubpage, lib, "adw_preferences_window_close_subpage")
	core.PuregoSafeRegister(&xPreferencesWindowGetCanNavigateBack, lib, "adw_preferences_window_get_can_navigate_back")
	core.PuregoSafeRegister(&xPreferencesWindowGetSearchEnabled, lib, "adw_preferences_window_get_search_enabled")
	core.PuregoSafeRegister(&xPreferencesWindowGetVisiblePage, lib, "adw_preferences_window_get_visible_page")
	core.PuregoSafeRegister(&xPreferencesWindowGetVisiblePageName, lib, "adw_preferences_window_get_visible_page_name")
	core.PuregoSafeRegister(&xPreferencesWindowPresentSubpage, lib, "adw_preferences_window_present_subpage")
	core.PuregoSafeRegister(&xPreferencesWindowRemove, lib, "adw_preferences_window_remove")
	core.PuregoSafeRegister(&xPreferencesWindowSetCanNavigateBack, lib, "adw_preferences_window_set_can_navigate_back")
	core.PuregoSafeRegister(&xPreferencesWindowSetSearchEnabled, lib, "adw_preferences_window_set_search_enabled")
	core.PuregoSafeRegister(&xPreferencesWindowSetVisiblePage, lib, "adw_preferences_window_set_visible_page")
	core.PuregoSafeRegister(&xPreferencesWindowSetVisiblePageName, lib, "adw_preferences_window_set_visible_page_name")

}
