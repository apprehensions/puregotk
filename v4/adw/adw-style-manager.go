// Package adw was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package adw

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type StyleManagerClass struct {
	ParentClass uintptr
}

// Application color schemes for [property@StyleManager:color-scheme].
type ColorScheme int

const (

	// Inherit the parent color-scheme. When set on the
	//   `AdwStyleManager` returned by [func@StyleManager.get_default], it's
	//   equivalent to `ADW_COLOR_SCHEME_PREFER_LIGHT`.
	ColorSchemeDefaultValue ColorScheme = 0
	// Always use light appearance.
	ColorSchemeForceLightValue ColorScheme = 1
	// Use light appearance unless the system
	//   prefers dark colors.
	ColorSchemePreferLightValue ColorScheme = 2
	// Use dark appearance unless the system prefers
	//   prefers light colors.
	ColorSchemePreferDarkValue ColorScheme = 3
	// Always use dark appearance.
	ColorSchemeForceDarkValue ColorScheme = 4
)

// A class for managing application-wide styling.
//
// `AdwStyleManager` provides a way to query and influence the application
// styles, such as whether to use dark or high contrast appearance.
//
// It allows to set the color scheme via the
// [property@StyleManager:color-scheme] property, and to query the current
// appearance, as well as whether a system-wide color scheme preference exists.
type StyleManager struct {
	gobject.Object
}

func StyleManagerNewFromInternalPtr(ptr uintptr) *StyleManager {
	cls := &StyleManager{}
	cls.Ptr = ptr
	return cls
}

var xStyleManagerGetColorScheme func(uintptr) ColorScheme

// Gets the requested application color scheme.
func (x *StyleManager) GetColorScheme() ColorScheme {

	cret := xStyleManagerGetColorScheme(x.GoPointer())
	return cret
}

var xStyleManagerGetDark func(uintptr) bool

// Gets whether the application is using dark appearance.
//
// This can be used to query the current appearance, as requested via
// [property@StyleManager:color-scheme].
func (x *StyleManager) GetDark() bool {

	cret := xStyleManagerGetDark(x.GoPointer())
	return cret
}

var xStyleManagerGetDisplay func(uintptr) uintptr

// Gets the display the style manager is associated with.
//
// The display will be `NULL` for the style manager returned by
// [func@StyleManager.get_default].
func (x *StyleManager) GetDisplay() *gdk.Display {
	var cls *gdk.Display

	cret := xStyleManagerGetDisplay(x.GoPointer())

	if cret == 0 {
		return cls
	}
	gobject.IncreaseRef(cret)
	cls = &gdk.Display{}
	cls.Ptr = cret
	return cls
}

var xStyleManagerGetHighContrast func(uintptr) bool

// Gets whether the application is using high contrast appearance.
//
// This cannot be overridden by applications.
func (x *StyleManager) GetHighContrast() bool {

	cret := xStyleManagerGetHighContrast(x.GoPointer())
	return cret
}

var xStyleManagerGetSystemSupportsColorSchemes func(uintptr) bool

// Gets whether the system supports color schemes.
//
// This can be used to check if the current environment provides a color scheme
// preference. For example, applications might want to show a separate
// appearance switcher if it's set to `FALSE`.
func (x *StyleManager) GetSystemSupportsColorSchemes() bool {

	cret := xStyleManagerGetSystemSupportsColorSchemes(x.GoPointer())
	return cret
}

var xStyleManagerSetColorScheme func(uintptr, ColorScheme)

// Sets the requested application color scheme.
//
// The effective appearance will be decided based on the application color
// scheme and the system preferred color scheme. The
// [property@StyleManager:dark] property can be used to query the current
// effective appearance.
//
// The `ADW_COLOR_SCHEME_PREFER_LIGHT` color scheme results in the application
// using light appearance unless the system prefers dark colors. This is the
// default value.
//
// The `ADW_COLOR_SCHEME_PREFER_DARK` color scheme results in the application
// using dark appearance, but can still switch to the light appearance if the
// system can prefers it, for example, when the high contrast preference is
// enabled.
//
// The `ADW_COLOR_SCHEME_FORCE_LIGHT` and `ADW_COLOR_SCHEME_FORCE_DARK` values
// ignore the system preference entirely. They are useful if the application
// wants to match its UI to its content or to provide a separate color scheme
// switcher.
//
// If a per-[class@Gdk.Display] style manager has its color scheme set to
// `ADW_COLOR_SCHEME_DEFAULT`, it will inherit the color scheme from the
// default style manager.
//
// For the default style manager, `ADW_COLOR_SCHEME_DEFAULT` is equivalent to
// `ADW_COLOR_SCHEME_PREFER_LIGHT`.
//
// The [property@StyleManager:system-supports-color-schemes] property can be
// used to check if the current environment provides a color scheme
// preference.
func (x *StyleManager) SetColorScheme(ColorSchemeVar ColorScheme) {

	xStyleManagerSetColorScheme(x.GoPointer(), ColorSchemeVar)

}

func (c *StyleManager) GoPointer() uintptr {
	return c.Ptr
}

func (c *StyleManager) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("ADW"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xStyleManagerGetColorScheme, lib, "adw_style_manager_get_color_scheme")
	core.PuregoSafeRegister(&xStyleManagerGetDark, lib, "adw_style_manager_get_dark")
	core.PuregoSafeRegister(&xStyleManagerGetDisplay, lib, "adw_style_manager_get_display")
	core.PuregoSafeRegister(&xStyleManagerGetHighContrast, lib, "adw_style_manager_get_high_contrast")
	core.PuregoSafeRegister(&xStyleManagerGetSystemSupportsColorSchemes, lib, "adw_style_manager_get_system_supports_color_schemes")
	core.PuregoSafeRegister(&xStyleManagerSetColorScheme, lib, "adw_style_manager_set_color_scheme")

}
