// Package gsk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gsk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/cairo"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/graphene"
	"github.com/jwijenbergh/puregotk/v4/pango"
)

// A render node applying a blending function between its two child nodes.
type BlendNode struct {
	RenderNode
}

func BlendNodeNewFromInternalPtr(ptr uintptr) *BlendNode {
	cls := &BlendNode{}
	cls.Ptr = ptr
	return cls
}

var xNewBlendNode func(uintptr, uintptr, BlendMode) uintptr

// Creates a `GskRenderNode` that will use @blend_mode to blend the @top
// node onto the @bottom node.
func NewBlendNode(BottomVar *RenderNode, TopVar *RenderNode, BlendModeVar BlendMode) *BlendNode {
	NewBlendNodePtr := xNewBlendNode(BottomVar.GoPointer(), TopVar.GoPointer(), BlendModeVar)
	if NewBlendNodePtr == 0 {
		return nil
	}

	NewBlendNodeCls := &BlendNode{}
	NewBlendNodeCls.Ptr = NewBlendNodePtr
	return NewBlendNodeCls
}

var xBlendNodeGetBlendMode func(uintptr) BlendMode

// Retrieves the blend mode used by @node.
func (x *BlendNode) GetBlendMode() BlendMode {

	return xBlendNodeGetBlendMode(x.GoPointer())

}

var xBlendNodeGetBottomChild func(uintptr) uintptr

// Retrieves the bottom `GskRenderNode` child of the @node.
func (x *BlendNode) GetBottomChild() *RenderNode {

	GetBottomChildPtr := xBlendNodeGetBottomChild(x.GoPointer())
	if GetBottomChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetBottomChildPtr)

	GetBottomChildCls := &RenderNode{}
	GetBottomChildCls.Ptr = GetBottomChildPtr
	return GetBottomChildCls

}

var xBlendNodeGetTopChild func(uintptr) uintptr

// Retrieves the top `GskRenderNode` child of the @node.
func (x *BlendNode) GetTopChild() *RenderNode {

	GetTopChildPtr := xBlendNodeGetTopChild(x.GoPointer())
	if GetTopChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetTopChildPtr)

	GetTopChildCls := &RenderNode{}
	GetTopChildCls.Ptr = GetTopChildPtr
	return GetTopChildCls

}

func (c *BlendNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *BlendNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node applying a blur effect to its single child.
type BlurNode struct {
	RenderNode
}

func BlurNodeNewFromInternalPtr(ptr uintptr) *BlurNode {
	cls := &BlurNode{}
	cls.Ptr = ptr
	return cls
}

var xNewBlurNode func(uintptr, float32) uintptr

// Creates a render node that blurs the child.
func NewBlurNode(ChildVar *RenderNode, RadiusVar float32) *BlurNode {
	NewBlurNodePtr := xNewBlurNode(ChildVar.GoPointer(), RadiusVar)
	if NewBlurNodePtr == 0 {
		return nil
	}

	NewBlurNodeCls := &BlurNode{}
	NewBlurNodeCls.Ptr = NewBlurNodePtr
	return NewBlurNodeCls
}

var xBlurNodeGetChild func(uintptr) uintptr

// Retrieves the child `GskRenderNode` of the blur @node.
func (x *BlurNode) GetChild() *RenderNode {

	GetChildPtr := xBlurNodeGetChild(x.GoPointer())
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xBlurNodeGetRadius func(uintptr) float32

// Retrieves the blur radius of the @node.
func (x *BlurNode) GetRadius() float32 {

	return xBlurNodeGetRadius(x.GoPointer())

}

func (c *BlurNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *BlurNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for a border.
type BorderNode struct {
	RenderNode
}

func BorderNodeNewFromInternalPtr(ptr uintptr) *BorderNode {
	cls := &BorderNode{}
	cls.Ptr = ptr
	return cls
}

var xNewBorderNode func(*RoundedRect, uintptr, uintptr) uintptr

// Creates a `GskRenderNode` that will stroke a border rectangle inside the
// given @outline.
//
// The 4 sides of the border can have different widths and colors.
func NewBorderNode(OutlineVar *RoundedRect, BorderWidthVar uintptr, BorderColorVar uintptr) *BorderNode {
	NewBorderNodePtr := xNewBorderNode(OutlineVar, BorderWidthVar, BorderColorVar)
	if NewBorderNodePtr == 0 {
		return nil
	}

	NewBorderNodeCls := &BorderNode{}
	NewBorderNodeCls.Ptr = NewBorderNodePtr
	return NewBorderNodeCls
}

var xBorderNodeGetColors func(uintptr) *gdk.RGBA

// Retrieves the colors of the border.
func (x *BorderNode) GetColors() *gdk.RGBA {

	return xBorderNodeGetColors(x.GoPointer())

}

var xBorderNodeGetOutline func(uintptr) *RoundedRect

// Retrieves the outline of the border.
func (x *BorderNode) GetOutline() *RoundedRect {

	return xBorderNodeGetOutline(x.GoPointer())

}

var xBorderNodeGetWidths func(uintptr) uintptr

// Retrieves the stroke widths of the border.
func (x *BorderNode) GetWidths() uintptr {

	return xBorderNodeGetWidths(x.GoPointer())

}

func (c *BorderNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *BorderNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for a Cairo surface.
type CairoNode struct {
	RenderNode
}

func CairoNodeNewFromInternalPtr(ptr uintptr) *CairoNode {
	cls := &CairoNode{}
	cls.Ptr = ptr
	return cls
}

var xNewCairoNode func(*graphene.Rect) uintptr

// Creates a `GskRenderNode` that will render a cairo surface
// into the area given by @bounds.
//
// You can draw to the cairo surface using [method@Gsk.CairoNode.get_draw_context].
func NewCairoNode(BoundsVar *graphene.Rect) *CairoNode {
	NewCairoNodePtr := xNewCairoNode(BoundsVar)
	if NewCairoNodePtr == 0 {
		return nil
	}

	NewCairoNodeCls := &CairoNode{}
	NewCairoNodeCls.Ptr = NewCairoNodePtr
	return NewCairoNodeCls
}

var xCairoNodeGetDrawContext func(uintptr) *cairo.Context

// Creates a Cairo context for drawing using the surface associated
// to the render node.
//
// If no surface exists yet, a surface will be created optimized for
// rendering to @renderer.
func (x *CairoNode) GetDrawContext() *cairo.Context {

	return xCairoNodeGetDrawContext(x.GoPointer())

}

var xCairoNodeGetSurface func(uintptr) *cairo.Surface

// Retrieves the Cairo surface used by the render node.
func (x *CairoNode) GetSurface() *cairo.Surface {

	return xCairoNodeGetSurface(x.GoPointer())

}

func (c *CairoNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *CairoNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node applying a rectangular clip to its single child node.
type ClipNode struct {
	RenderNode
}

func ClipNodeNewFromInternalPtr(ptr uintptr) *ClipNode {
	cls := &ClipNode{}
	cls.Ptr = ptr
	return cls
}

var xNewClipNode func(uintptr, *graphene.Rect) uintptr

// Creates a `GskRenderNode` that will clip the @child to the area
// given by @clip.
func NewClipNode(ChildVar *RenderNode, ClipVar *graphene.Rect) *ClipNode {
	NewClipNodePtr := xNewClipNode(ChildVar.GoPointer(), ClipVar)
	if NewClipNodePtr == 0 {
		return nil
	}

	NewClipNodeCls := &ClipNode{}
	NewClipNodeCls.Ptr = NewClipNodePtr
	return NewClipNodeCls
}

var xClipNodeGetChild func(uintptr) uintptr

// Gets the child node that is getting clipped by the given @node.
func (x *ClipNode) GetChild() *RenderNode {

	GetChildPtr := xClipNodeGetChild(x.GoPointer())
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xClipNodeGetClip func(uintptr) *graphene.Rect

// Retrieves the clip rectangle for @node.
func (x *ClipNode) GetClip() *graphene.Rect {

	return xClipNodeGetClip(x.GoPointer())

}

func (c *ClipNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *ClipNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node controlling the color matrix of its single child node.
type ColorMatrixNode struct {
	RenderNode
}

func ColorMatrixNodeNewFromInternalPtr(ptr uintptr) *ColorMatrixNode {
	cls := &ColorMatrixNode{}
	cls.Ptr = ptr
	return cls
}

var xNewColorMatrixNode func(uintptr, *graphene.Matrix, *graphene.Vec4) uintptr

// Creates a `GskRenderNode` that will drawn the @child with
// @color_matrix.
//
// In particular, the node will transform the operation
//
//	pixel = color_matrix * pixel + color_offset
//
// for every pixel.
func NewColorMatrixNode(ChildVar *RenderNode, ColorMatrixVar *graphene.Matrix, ColorOffsetVar *graphene.Vec4) *ColorMatrixNode {
	NewColorMatrixNodePtr := xNewColorMatrixNode(ChildVar.GoPointer(), ColorMatrixVar, ColorOffsetVar)
	if NewColorMatrixNodePtr == 0 {
		return nil
	}

	NewColorMatrixNodeCls := &ColorMatrixNode{}
	NewColorMatrixNodeCls.Ptr = NewColorMatrixNodePtr
	return NewColorMatrixNodeCls
}

var xColorMatrixNodeGetChild func(uintptr) uintptr

// Gets the child node that is getting its colors modified by the given @node.
func (x *ColorMatrixNode) GetChild() *RenderNode {

	GetChildPtr := xColorMatrixNodeGetChild(x.GoPointer())
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xColorMatrixNodeGetColorMatrix func(uintptr) *graphene.Matrix

// Retrieves the color matrix used by the @node.
func (x *ColorMatrixNode) GetColorMatrix() *graphene.Matrix {

	return xColorMatrixNodeGetColorMatrix(x.GoPointer())

}

var xColorMatrixNodeGetColorOffset func(uintptr) *graphene.Vec4

// Retrieves the color offset used by the @node.
func (x *ColorMatrixNode) GetColorOffset() *graphene.Vec4 {

	return xColorMatrixNodeGetColorOffset(x.GoPointer())

}

func (c *ColorMatrixNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *ColorMatrixNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for a solid color.
type ColorNode struct {
	RenderNode
}

func ColorNodeNewFromInternalPtr(ptr uintptr) *ColorNode {
	cls := &ColorNode{}
	cls.Ptr = ptr
	return cls
}

var xNewColorNode func(*gdk.RGBA, *graphene.Rect) uintptr

// Creates a `GskRenderNode` that will render the color specified by @rgba into
// the area given by @bounds.
func NewColorNode(RgbaVar *gdk.RGBA, BoundsVar *graphene.Rect) *ColorNode {
	NewColorNodePtr := xNewColorNode(RgbaVar, BoundsVar)
	if NewColorNodePtr == 0 {
		return nil
	}

	NewColorNodeCls := &ColorNode{}
	NewColorNodeCls.Ptr = NewColorNodePtr
	return NewColorNodeCls
}

var xColorNodeGetColor func(uintptr) *gdk.RGBA

// Retrieves the color of the given @node.
func (x *ColorNode) GetColor() *gdk.RGBA {

	return xColorNodeGetColor(x.GoPointer())

}

func (c *ColorNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *ColorNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for a conic gradient.
type ConicGradientNode struct {
	RenderNode
}

func ConicGradientNodeNewFromInternalPtr(ptr uintptr) *ConicGradientNode {
	cls := &ConicGradientNode{}
	cls.Ptr = ptr
	return cls
}

var xNewConicGradientNode func(*graphene.Rect, *graphene.Point, float32, uintptr, uint) uintptr

// Creates a `GskRenderNode` that draws a conic gradient.
//
// The conic gradient
// starts around @center in the direction of @rotation. A rotation of 0 means
// that the gradient points up. Color stops are then added clockwise.
func NewConicGradientNode(BoundsVar *graphene.Rect, CenterVar *graphene.Point, RotationVar float32, ColorStopsVar uintptr, NColorStopsVar uint) *ConicGradientNode {
	NewConicGradientNodePtr := xNewConicGradientNode(BoundsVar, CenterVar, RotationVar, ColorStopsVar, NColorStopsVar)
	if NewConicGradientNodePtr == 0 {
		return nil
	}

	NewConicGradientNodeCls := &ConicGradientNode{}
	NewConicGradientNodeCls.Ptr = NewConicGradientNodePtr
	return NewConicGradientNodeCls
}

var xConicGradientNodeGetAngle func(uintptr) float32

// Retrieves the angle for the gradient in radians, normalized in [0, 2 * PI].
//
// The angle is starting at the top and going clockwise, as expressed
// in the css specification:
//
//	angle = 90 - gsk_conic_gradient_node_get_rotation()
func (x *ConicGradientNode) GetAngle() float32 {

	return xConicGradientNodeGetAngle(x.GoPointer())

}

var xConicGradientNodeGetCenter func(uintptr) *graphene.Point

// Retrieves the center pointer for the gradient.
func (x *ConicGradientNode) GetCenter() *graphene.Point {

	return xConicGradientNodeGetCenter(x.GoPointer())

}

var xConicGradientNodeGetColorStops func(uintptr, uint) uintptr

// Retrieves the color stops in the gradient.
func (x *ConicGradientNode) GetColorStops(NStopsVar uint) uintptr {

	return xConicGradientNodeGetColorStops(x.GoPointer(), NStopsVar)

}

var xConicGradientNodeGetNColorStops func(uintptr) uint

// Retrieves the number of color stops in the gradient.
func (x *ConicGradientNode) GetNColorStops() uint {

	return xConicGradientNodeGetNColorStops(x.GoPointer())

}

var xConicGradientNodeGetRotation func(uintptr) float32

// Retrieves the rotation for the gradient in degrees.
func (x *ConicGradientNode) GetRotation() float32 {

	return xConicGradientNodeGetRotation(x.GoPointer())

}

func (c *ConicGradientNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *ConicGradientNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node that can contain other render nodes.
type ContainerNode struct {
	RenderNode
}

func ContainerNodeNewFromInternalPtr(ptr uintptr) *ContainerNode {
	cls := &ContainerNode{}
	cls.Ptr = ptr
	return cls
}

var xNewContainerNode func(uintptr, uint) uintptr

// Creates a new `GskRenderNode` instance for holding the given @children.
//
// The new node will acquire a reference to each of the children.
func NewContainerNode(ChildrenVar uintptr, NChildrenVar uint) *ContainerNode {
	NewContainerNodePtr := xNewContainerNode(ChildrenVar, NChildrenVar)
	if NewContainerNodePtr == 0 {
		return nil
	}

	NewContainerNodeCls := &ContainerNode{}
	NewContainerNodeCls.Ptr = NewContainerNodePtr
	return NewContainerNodeCls
}

var xContainerNodeGetChild func(uintptr, uint) uintptr

// Gets one of the children of @container.
func (x *ContainerNode) GetChild(IdxVar uint) *RenderNode {

	GetChildPtr := xContainerNodeGetChild(x.GoPointer(), IdxVar)
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xContainerNodeGetNChildren func(uintptr) uint

// Retrieves the number of direct children of @node.
func (x *ContainerNode) GetNChildren() uint {

	return xContainerNodeGetNChildren(x.GoPointer())

}

func (c *ContainerNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *ContainerNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node cross fading between two child nodes.
type CrossFadeNode struct {
	RenderNode
}

func CrossFadeNodeNewFromInternalPtr(ptr uintptr) *CrossFadeNode {
	cls := &CrossFadeNode{}
	cls.Ptr = ptr
	return cls
}

var xNewCrossFadeNode func(uintptr, uintptr, float32) uintptr

// Creates a `GskRenderNode` that will do a cross-fade between @start and @end.
func NewCrossFadeNode(StartVar *RenderNode, EndVar *RenderNode, ProgressVar float32) *CrossFadeNode {
	NewCrossFadeNodePtr := xNewCrossFadeNode(StartVar.GoPointer(), EndVar.GoPointer(), ProgressVar)
	if NewCrossFadeNodePtr == 0 {
		return nil
	}

	NewCrossFadeNodeCls := &CrossFadeNode{}
	NewCrossFadeNodeCls.Ptr = NewCrossFadeNodePtr
	return NewCrossFadeNodeCls
}

var xCrossFadeNodeGetEndChild func(uintptr) uintptr

// Retrieves the child `GskRenderNode` at the end of the cross-fade.
func (x *CrossFadeNode) GetEndChild() *RenderNode {

	GetEndChildPtr := xCrossFadeNodeGetEndChild(x.GoPointer())
	if GetEndChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetEndChildPtr)

	GetEndChildCls := &RenderNode{}
	GetEndChildCls.Ptr = GetEndChildPtr
	return GetEndChildCls

}

var xCrossFadeNodeGetProgress func(uintptr) float32

// Retrieves the progress value of the cross fade.
func (x *CrossFadeNode) GetProgress() float32 {

	return xCrossFadeNodeGetProgress(x.GoPointer())

}

var xCrossFadeNodeGetStartChild func(uintptr) uintptr

// Retrieves the child `GskRenderNode` at the beginning of the cross-fade.
func (x *CrossFadeNode) GetStartChild() *RenderNode {

	GetStartChildPtr := xCrossFadeNodeGetStartChild(x.GoPointer())
	if GetStartChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetStartChildPtr)

	GetStartChildCls := &RenderNode{}
	GetStartChildCls.Ptr = GetStartChildPtr
	return GetStartChildCls

}

func (c *CrossFadeNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *CrossFadeNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node that emits a debugging message when drawing its
// child node.
type DebugNode struct {
	RenderNode
}

func DebugNodeNewFromInternalPtr(ptr uintptr) *DebugNode {
	cls := &DebugNode{}
	cls.Ptr = ptr
	return cls
}

var xNewDebugNode func(uintptr, string) uintptr

// Creates a `GskRenderNode` that will add debug information about
// the given @child.
//
// Adding this node has no visual effect.
func NewDebugNode(ChildVar *RenderNode, MessageVar string) *DebugNode {
	NewDebugNodePtr := xNewDebugNode(ChildVar.GoPointer(), MessageVar)
	if NewDebugNodePtr == 0 {
		return nil
	}

	NewDebugNodeCls := &DebugNode{}
	NewDebugNodeCls.Ptr = NewDebugNodePtr
	return NewDebugNodeCls
}

var xDebugNodeGetChild func(uintptr) uintptr

// Gets the child node that is getting drawn by the given @node.
func (x *DebugNode) GetChild() *RenderNode {

	GetChildPtr := xDebugNodeGetChild(x.GoPointer())
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xDebugNodeGetMessage func(uintptr) string

// Gets the debug message that was set on this node
func (x *DebugNode) GetMessage() string {

	return xDebugNodeGetMessage(x.GoPointer())

}

func (c *DebugNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *DebugNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node using a GL shader when drawing its children nodes.
type GLShaderNode struct {
	RenderNode
}

func GLShaderNodeNewFromInternalPtr(ptr uintptr) *GLShaderNode {
	cls := &GLShaderNode{}
	cls.Ptr = ptr
	return cls
}

var xNewGLShaderNode func(uintptr, *graphene.Rect, *glib.Bytes, uintptr, uint) uintptr

// Creates a `GskRenderNode` that will render the given @shader into the
// area given by @bounds.
//
// The @args is a block of data to use for uniform input, as per types and
// offsets defined by the @shader. Normally this is generated by
// [method@Gsk.GLShader.format_args] or [struct@Gsk.ShaderArgsBuilder].
//
// See [class@Gsk.GLShader] for details about how the shader should be written.
//
// All the children will be rendered into textures (if they aren't already
// `GskTextureNodes`, which will be used directly). These textures will be
// sent as input to the shader.
//
// If the renderer doesn't support GL shaders, or if there is any problem
// when compiling the shader, then the node will draw pink. You should use
// [method@Gsk.GLShader.compile] to ensure the @shader will work for the
// renderer before using it.
func NewGLShaderNode(ShaderVar *GLShader, BoundsVar *graphene.Rect, ArgsVar *glib.Bytes, ChildrenVar uintptr, NChildrenVar uint) *GLShaderNode {
	NewGLShaderNodePtr := xNewGLShaderNode(ShaderVar.GoPointer(), BoundsVar, ArgsVar, ChildrenVar, NChildrenVar)
	if NewGLShaderNodePtr == 0 {
		return nil
	}

	NewGLShaderNodeCls := &GLShaderNode{}
	NewGLShaderNodeCls.Ptr = NewGLShaderNodePtr
	return NewGLShaderNodeCls
}

var xGLShaderNodeGetArgs func(uintptr) *glib.Bytes

// Gets args for the node.
func (x *GLShaderNode) GetArgs() *glib.Bytes {

	return xGLShaderNodeGetArgs(x.GoPointer())

}

var xGLShaderNodeGetChild func(uintptr, uint) uintptr

// Gets one of the children.
func (x *GLShaderNode) GetChild(IdxVar uint) *RenderNode {

	GetChildPtr := xGLShaderNodeGetChild(x.GoPointer(), IdxVar)
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xGLShaderNodeGetNChildren func(uintptr) uint

// Returns the number of children
func (x *GLShaderNode) GetNChildren() uint {

	return xGLShaderNodeGetNChildren(x.GoPointer())

}

var xGLShaderNodeGetShader func(uintptr) uintptr

// Gets shader code for the node.
func (x *GLShaderNode) GetShader() *GLShader {

	GetShaderPtr := xGLShaderNodeGetShader(x.GoPointer())
	if GetShaderPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetShaderPtr)

	GetShaderCls := &GLShader{}
	GetShaderCls.Ptr = GetShaderPtr
	return GetShaderCls

}

func (c *GLShaderNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *GLShaderNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for an inset shadow.
type InsetShadowNode struct {
	RenderNode
}

func InsetShadowNodeNewFromInternalPtr(ptr uintptr) *InsetShadowNode {
	cls := &InsetShadowNode{}
	cls.Ptr = ptr
	return cls
}

var xNewInsetShadowNode func(*RoundedRect, *gdk.RGBA, float32, float32, float32, float32) uintptr

// Creates a `GskRenderNode` that will render an inset shadow
// into the box given by @outline.
func NewInsetShadowNode(OutlineVar *RoundedRect, ColorVar *gdk.RGBA, DxVar float32, DyVar float32, SpreadVar float32, BlurRadiusVar float32) *InsetShadowNode {
	NewInsetShadowNodePtr := xNewInsetShadowNode(OutlineVar, ColorVar, DxVar, DyVar, SpreadVar, BlurRadiusVar)
	if NewInsetShadowNodePtr == 0 {
		return nil
	}

	NewInsetShadowNodeCls := &InsetShadowNode{}
	NewInsetShadowNodeCls.Ptr = NewInsetShadowNodePtr
	return NewInsetShadowNodeCls
}

var xInsetShadowNodeGetBlurRadius func(uintptr) float32

// Retrieves the blur radius to apply to the shadow.
func (x *InsetShadowNode) GetBlurRadius() float32 {

	return xInsetShadowNodeGetBlurRadius(x.GoPointer())

}

var xInsetShadowNodeGetColor func(uintptr) *gdk.RGBA

// Retrieves the color of the inset shadow.
func (x *InsetShadowNode) GetColor() *gdk.RGBA {

	return xInsetShadowNodeGetColor(x.GoPointer())

}

var xInsetShadowNodeGetDx func(uintptr) float32

// Retrieves the horizontal offset of the inset shadow.
func (x *InsetShadowNode) GetDx() float32 {

	return xInsetShadowNodeGetDx(x.GoPointer())

}

var xInsetShadowNodeGetDy func(uintptr) float32

// Retrieves the vertical offset of the inset shadow.
func (x *InsetShadowNode) GetDy() float32 {

	return xInsetShadowNodeGetDy(x.GoPointer())

}

var xInsetShadowNodeGetOutline func(uintptr) *RoundedRect

// Retrieves the outline rectangle of the inset shadow.
func (x *InsetShadowNode) GetOutline() *RoundedRect {

	return xInsetShadowNodeGetOutline(x.GoPointer())

}

var xInsetShadowNodeGetSpread func(uintptr) float32

// Retrieves how much the shadow spreads inwards.
func (x *InsetShadowNode) GetSpread() float32 {

	return xInsetShadowNodeGetSpread(x.GoPointer())

}

func (c *InsetShadowNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *InsetShadowNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for a linear gradient.
type LinearGradientNode struct {
	RenderNode
}

func LinearGradientNodeNewFromInternalPtr(ptr uintptr) *LinearGradientNode {
	cls := &LinearGradientNode{}
	cls.Ptr = ptr
	return cls
}

var xNewLinearGradientNode func(*graphene.Rect, *graphene.Point, *graphene.Point, uintptr, uint) uintptr

// Creates a `GskRenderNode` that will create a linear gradient from the given
// points and color stops, and render that into the area given by @bounds.
func NewLinearGradientNode(BoundsVar *graphene.Rect, StartVar *graphene.Point, EndVar *graphene.Point, ColorStopsVar uintptr, NColorStopsVar uint) *LinearGradientNode {
	NewLinearGradientNodePtr := xNewLinearGradientNode(BoundsVar, StartVar, EndVar, ColorStopsVar, NColorStopsVar)
	if NewLinearGradientNodePtr == 0 {
		return nil
	}

	NewLinearGradientNodeCls := &LinearGradientNode{}
	NewLinearGradientNodeCls.Ptr = NewLinearGradientNodePtr
	return NewLinearGradientNodeCls
}

var xLinearGradientNodeGetColorStops func(uintptr, uint) uintptr

// Retrieves the color stops in the gradient.
func (x *LinearGradientNode) GetColorStops(NStopsVar uint) uintptr {

	return xLinearGradientNodeGetColorStops(x.GoPointer(), NStopsVar)

}

var xLinearGradientNodeGetEnd func(uintptr) *graphene.Point

// Retrieves the final point of the linear gradient.
func (x *LinearGradientNode) GetEnd() *graphene.Point {

	return xLinearGradientNodeGetEnd(x.GoPointer())

}

var xLinearGradientNodeGetNColorStops func(uintptr) uint

// Retrieves the number of color stops in the gradient.
func (x *LinearGradientNode) GetNColorStops() uint {

	return xLinearGradientNodeGetNColorStops(x.GoPointer())

}

var xLinearGradientNodeGetStart func(uintptr) *graphene.Point

// Retrieves the initial point of the linear gradient.
func (x *LinearGradientNode) GetStart() *graphene.Point {

	return xLinearGradientNodeGetStart(x.GoPointer())

}

func (c *LinearGradientNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *LinearGradientNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node controlling the opacity of its single child node.
type OpacityNode struct {
	RenderNode
}

func OpacityNodeNewFromInternalPtr(ptr uintptr) *OpacityNode {
	cls := &OpacityNode{}
	cls.Ptr = ptr
	return cls
}

var xNewOpacityNode func(uintptr, float32) uintptr

// Creates a `GskRenderNode` that will drawn the @child with reduced
// @opacity.
func NewOpacityNode(ChildVar *RenderNode, OpacityVar float32) *OpacityNode {
	NewOpacityNodePtr := xNewOpacityNode(ChildVar.GoPointer(), OpacityVar)
	if NewOpacityNodePtr == 0 {
		return nil
	}

	NewOpacityNodeCls := &OpacityNode{}
	NewOpacityNodeCls.Ptr = NewOpacityNodePtr
	return NewOpacityNodeCls
}

var xOpacityNodeGetChild func(uintptr) uintptr

// Gets the child node that is getting opacityed by the given @node.
func (x *OpacityNode) GetChild() *RenderNode {

	GetChildPtr := xOpacityNodeGetChild(x.GoPointer())
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xOpacityNodeGetOpacity func(uintptr) float32

// Gets the transparency factor for an opacity node.
func (x *OpacityNode) GetOpacity() float32 {

	return xOpacityNodeGetOpacity(x.GoPointer())

}

func (c *OpacityNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *OpacityNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for an outset shadow.
type OutsetShadowNode struct {
	RenderNode
}

func OutsetShadowNodeNewFromInternalPtr(ptr uintptr) *OutsetShadowNode {
	cls := &OutsetShadowNode{}
	cls.Ptr = ptr
	return cls
}

var xNewOutsetShadowNode func(*RoundedRect, *gdk.RGBA, float32, float32, float32, float32) uintptr

// Creates a `GskRenderNode` that will render an outset shadow
// around the box given by @outline.
func NewOutsetShadowNode(OutlineVar *RoundedRect, ColorVar *gdk.RGBA, DxVar float32, DyVar float32, SpreadVar float32, BlurRadiusVar float32) *OutsetShadowNode {
	NewOutsetShadowNodePtr := xNewOutsetShadowNode(OutlineVar, ColorVar, DxVar, DyVar, SpreadVar, BlurRadiusVar)
	if NewOutsetShadowNodePtr == 0 {
		return nil
	}

	NewOutsetShadowNodeCls := &OutsetShadowNode{}
	NewOutsetShadowNodeCls.Ptr = NewOutsetShadowNodePtr
	return NewOutsetShadowNodeCls
}

var xOutsetShadowNodeGetBlurRadius func(uintptr) float32

// Retrieves the blur radius of the shadow.
func (x *OutsetShadowNode) GetBlurRadius() float32 {

	return xOutsetShadowNodeGetBlurRadius(x.GoPointer())

}

var xOutsetShadowNodeGetColor func(uintptr) *gdk.RGBA

// Retrieves the color of the outset shadow.
func (x *OutsetShadowNode) GetColor() *gdk.RGBA {

	return xOutsetShadowNodeGetColor(x.GoPointer())

}

var xOutsetShadowNodeGetDx func(uintptr) float32

// Retrieves the horizontal offset of the outset shadow.
func (x *OutsetShadowNode) GetDx() float32 {

	return xOutsetShadowNodeGetDx(x.GoPointer())

}

var xOutsetShadowNodeGetDy func(uintptr) float32

// Retrieves the vertical offset of the outset shadow.
func (x *OutsetShadowNode) GetDy() float32 {

	return xOutsetShadowNodeGetDy(x.GoPointer())

}

var xOutsetShadowNodeGetOutline func(uintptr) *RoundedRect

// Retrieves the outline rectangle of the outset shadow.
func (x *OutsetShadowNode) GetOutline() *RoundedRect {

	return xOutsetShadowNodeGetOutline(x.GoPointer())

}

var xOutsetShadowNodeGetSpread func(uintptr) float32

// Retrieves how much the shadow spreads outwards.
func (x *OutsetShadowNode) GetSpread() float32 {

	return xOutsetShadowNodeGetSpread(x.GoPointer())

}

func (c *OutsetShadowNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *OutsetShadowNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for a radial gradient.
type RadialGradientNode struct {
	RenderNode
}

func RadialGradientNodeNewFromInternalPtr(ptr uintptr) *RadialGradientNode {
	cls := &RadialGradientNode{}
	cls.Ptr = ptr
	return cls
}

var xNewRadialGradientNode func(*graphene.Rect, *graphene.Point, float32, float32, float32, float32, uintptr, uint) uintptr

// Creates a `GskRenderNode` that draws a radial gradient.
//
// The radial gradient
// starts around @center. The size of the gradient is dictated by @hradius
// in horizontal orientation and by @vradius in vertial orientation.
func NewRadialGradientNode(BoundsVar *graphene.Rect, CenterVar *graphene.Point, HradiusVar float32, VradiusVar float32, StartVar float32, EndVar float32, ColorStopsVar uintptr, NColorStopsVar uint) *RadialGradientNode {
	NewRadialGradientNodePtr := xNewRadialGradientNode(BoundsVar, CenterVar, HradiusVar, VradiusVar, StartVar, EndVar, ColorStopsVar, NColorStopsVar)
	if NewRadialGradientNodePtr == 0 {
		return nil
	}

	NewRadialGradientNodeCls := &RadialGradientNode{}
	NewRadialGradientNodeCls.Ptr = NewRadialGradientNodePtr
	return NewRadialGradientNodeCls
}

var xRadialGradientNodeGetCenter func(uintptr) *graphene.Point

// Retrieves the center pointer for the gradient.
func (x *RadialGradientNode) GetCenter() *graphene.Point {

	return xRadialGradientNodeGetCenter(x.GoPointer())

}

var xRadialGradientNodeGetColorStops func(uintptr, uint) uintptr

// Retrieves the color stops in the gradient.
func (x *RadialGradientNode) GetColorStops(NStopsVar uint) uintptr {

	return xRadialGradientNodeGetColorStops(x.GoPointer(), NStopsVar)

}

var xRadialGradientNodeGetEnd func(uintptr) float32

// Retrieves the end value for the gradient.
func (x *RadialGradientNode) GetEnd() float32 {

	return xRadialGradientNodeGetEnd(x.GoPointer())

}

var xRadialGradientNodeGetHradius func(uintptr) float32

// Retrieves the horizonal radius for the gradient.
func (x *RadialGradientNode) GetHradius() float32 {

	return xRadialGradientNodeGetHradius(x.GoPointer())

}

var xRadialGradientNodeGetNColorStops func(uintptr) uint

// Retrieves the number of color stops in the gradient.
func (x *RadialGradientNode) GetNColorStops() uint {

	return xRadialGradientNodeGetNColorStops(x.GoPointer())

}

var xRadialGradientNodeGetStart func(uintptr) float32

// Retrieves the start value for the gradient.
func (x *RadialGradientNode) GetStart() float32 {

	return xRadialGradientNodeGetStart(x.GoPointer())

}

var xRadialGradientNodeGetVradius func(uintptr) float32

// Retrieves the vertical radius for the gradient.
func (x *RadialGradientNode) GetVradius() float32 {

	return xRadialGradientNodeGetVradius(x.GoPointer())

}

func (c *RadialGradientNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *RadialGradientNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node repeating its single child node.
type RepeatNode struct {
	RenderNode
}

func RepeatNodeNewFromInternalPtr(ptr uintptr) *RepeatNode {
	cls := &RepeatNode{}
	cls.Ptr = ptr
	return cls
}

var xNewRepeatNode func(*graphene.Rect, uintptr, *graphene.Rect) uintptr

// Creates a `GskRenderNode` that will repeat the drawing of @child across
// the given @bounds.
func NewRepeatNode(BoundsVar *graphene.Rect, ChildVar *RenderNode, ChildBoundsVar *graphene.Rect) *RepeatNode {
	NewRepeatNodePtr := xNewRepeatNode(BoundsVar, ChildVar.GoPointer(), ChildBoundsVar)
	if NewRepeatNodePtr == 0 {
		return nil
	}

	NewRepeatNodeCls := &RepeatNode{}
	NewRepeatNodeCls.Ptr = NewRepeatNodePtr
	return NewRepeatNodeCls
}

var xRepeatNodeGetChild func(uintptr) uintptr

// Retrieves the child of @node.
func (x *RepeatNode) GetChild() *RenderNode {

	GetChildPtr := xRepeatNodeGetChild(x.GoPointer())
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xRepeatNodeGetChildBounds func(uintptr) *graphene.Rect

// Retrieves the bounding rectangle of the child of @node.
func (x *RepeatNode) GetChildBounds() *graphene.Rect {

	return xRepeatNodeGetChildBounds(x.GoPointer())

}

func (c *RepeatNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *RepeatNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for a repeating linear gradient.
type RepeatingLinearGradientNode struct {
	RenderNode
}

func RepeatingLinearGradientNodeNewFromInternalPtr(ptr uintptr) *RepeatingLinearGradientNode {
	cls := &RepeatingLinearGradientNode{}
	cls.Ptr = ptr
	return cls
}

var xNewRepeatingLinearGradientNode func(*graphene.Rect, *graphene.Point, *graphene.Point, uintptr, uint) uintptr

// Creates a `GskRenderNode` that will create a repeating linear gradient
// from the given points and color stops, and render that into the area
// given by @bounds.
func NewRepeatingLinearGradientNode(BoundsVar *graphene.Rect, StartVar *graphene.Point, EndVar *graphene.Point, ColorStopsVar uintptr, NColorStopsVar uint) *RepeatingLinearGradientNode {
	NewRepeatingLinearGradientNodePtr := xNewRepeatingLinearGradientNode(BoundsVar, StartVar, EndVar, ColorStopsVar, NColorStopsVar)
	if NewRepeatingLinearGradientNodePtr == 0 {
		return nil
	}

	NewRepeatingLinearGradientNodeCls := &RepeatingLinearGradientNode{}
	NewRepeatingLinearGradientNodeCls.Ptr = NewRepeatingLinearGradientNodePtr
	return NewRepeatingLinearGradientNodeCls
}

func (c *RepeatingLinearGradientNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *RepeatingLinearGradientNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for a repeating radial gradient.
type RepeatingRadialGradientNode struct {
	RenderNode
}

func RepeatingRadialGradientNodeNewFromInternalPtr(ptr uintptr) *RepeatingRadialGradientNode {
	cls := &RepeatingRadialGradientNode{}
	cls.Ptr = ptr
	return cls
}

var xNewRepeatingRadialGradientNode func(*graphene.Rect, *graphene.Point, float32, float32, float32, float32, uintptr, uint) uintptr

// Creates a `GskRenderNode` that draws a repeating radial gradient.
//
// The radial gradient starts around @center. The size of the gradient
// is dictated by @hradius in horizontal orientation and by @vradius
// in vertial orientation.
func NewRepeatingRadialGradientNode(BoundsVar *graphene.Rect, CenterVar *graphene.Point, HradiusVar float32, VradiusVar float32, StartVar float32, EndVar float32, ColorStopsVar uintptr, NColorStopsVar uint) *RepeatingRadialGradientNode {
	NewRepeatingRadialGradientNodePtr := xNewRepeatingRadialGradientNode(BoundsVar, CenterVar, HradiusVar, VradiusVar, StartVar, EndVar, ColorStopsVar, NColorStopsVar)
	if NewRepeatingRadialGradientNodePtr == 0 {
		return nil
	}

	NewRepeatingRadialGradientNodeCls := &RepeatingRadialGradientNode{}
	NewRepeatingRadialGradientNodeCls.Ptr = NewRepeatingRadialGradientNodePtr
	return NewRepeatingRadialGradientNodeCls
}

func (c *RepeatingRadialGradientNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *RepeatingRadialGradientNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node applying a rounded rectangle clip to its single child.
type RoundedClipNode struct {
	RenderNode
}

func RoundedClipNodeNewFromInternalPtr(ptr uintptr) *RoundedClipNode {
	cls := &RoundedClipNode{}
	cls.Ptr = ptr
	return cls
}

var xNewRoundedClipNode func(uintptr, *RoundedRect) uintptr

// Creates a `GskRenderNode` that will clip the @child to the area
// given by @clip.
func NewRoundedClipNode(ChildVar *RenderNode, ClipVar *RoundedRect) *RoundedClipNode {
	NewRoundedClipNodePtr := xNewRoundedClipNode(ChildVar.GoPointer(), ClipVar)
	if NewRoundedClipNodePtr == 0 {
		return nil
	}

	NewRoundedClipNodeCls := &RoundedClipNode{}
	NewRoundedClipNodeCls.Ptr = NewRoundedClipNodePtr
	return NewRoundedClipNodeCls
}

var xRoundedClipNodeGetChild func(uintptr) uintptr

// Gets the child node that is getting clipped by the given @node.
func (x *RoundedClipNode) GetChild() *RenderNode {

	GetChildPtr := xRoundedClipNodeGetChild(x.GoPointer())
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xRoundedClipNodeGetClip func(uintptr) *RoundedRect

// Retrieves the rounded rectangle used to clip the contents of the @node.
func (x *RoundedClipNode) GetClip() *RoundedRect {

	return xRoundedClipNodeGetClip(x.GoPointer())

}

func (c *RoundedClipNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *RoundedClipNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node drawing one or more shadows behind its single child node.
type ShadowNode struct {
	RenderNode
}

func ShadowNodeNewFromInternalPtr(ptr uintptr) *ShadowNode {
	cls := &ShadowNode{}
	cls.Ptr = ptr
	return cls
}

var xNewShadowNode func(uintptr, uintptr, uint) uintptr

// Creates a `GskRenderNode` that will draw a @child with the given
// @shadows below it.
func NewShadowNode(ChildVar *RenderNode, ShadowsVar uintptr, NShadowsVar uint) *ShadowNode {
	NewShadowNodePtr := xNewShadowNode(ChildVar.GoPointer(), ShadowsVar, NShadowsVar)
	if NewShadowNodePtr == 0 {
		return nil
	}

	NewShadowNodeCls := &ShadowNode{}
	NewShadowNodeCls.Ptr = NewShadowNodePtr
	return NewShadowNodeCls
}

var xShadowNodeGetChild func(uintptr) uintptr

// Retrieves the child `GskRenderNode` of the shadow @node.
func (x *ShadowNode) GetChild() *RenderNode {

	GetChildPtr := xShadowNodeGetChild(x.GoPointer())
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xShadowNodeGetNShadows func(uintptr) uint

// Retrieves the number of shadows in the @node.
func (x *ShadowNode) GetNShadows() uint {

	return xShadowNodeGetNShadows(x.GoPointer())

}

var xShadowNodeGetShadow func(uintptr, uint) *Shadow

// Retrieves the shadow data at the given index @i.
func (x *ShadowNode) GetShadow(IVar uint) *Shadow {

	return xShadowNodeGetShadow(x.GoPointer(), IVar)

}

func (c *ShadowNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *ShadowNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node drawing a set of glyphs.
type TextNode struct {
	RenderNode
}

func TextNodeNewFromInternalPtr(ptr uintptr) *TextNode {
	cls := &TextNode{}
	cls.Ptr = ptr
	return cls
}

var xNewTextNode func(uintptr, *pango.GlyphString, *gdk.RGBA, *graphene.Point) uintptr

// Creates a render node that renders the given glyphs.
//
// Note that @color may not be used if the font contains
// color glyphs.
func NewTextNode(FontVar *pango.Font, GlyphsVar *pango.GlyphString, ColorVar *gdk.RGBA, OffsetVar *graphene.Point) *TextNode {
	NewTextNodePtr := xNewTextNode(FontVar.GoPointer(), GlyphsVar, ColorVar, OffsetVar)
	if NewTextNodePtr == 0 {
		return nil
	}

	NewTextNodeCls := &TextNode{}
	NewTextNodeCls.Ptr = NewTextNodePtr
	return NewTextNodeCls
}

var xTextNodeGetColor func(uintptr) *gdk.RGBA

// Retrieves the color used by the text @node.
func (x *TextNode) GetColor() *gdk.RGBA {

	return xTextNodeGetColor(x.GoPointer())

}

var xTextNodeGetFont func(uintptr) uintptr

// Returns the font used by the text @node.
func (x *TextNode) GetFont() *pango.Font {

	GetFontPtr := xTextNodeGetFont(x.GoPointer())
	if GetFontPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetFontPtr)

	GetFontCls := &pango.Font{}
	GetFontCls.Ptr = GetFontPtr
	return GetFontCls

}

var xTextNodeGetGlyphs func(uintptr, uint) uintptr

// Retrieves the glyph information in the @node.
func (x *TextNode) GetGlyphs(NGlyphsVar uint) uintptr {

	return xTextNodeGetGlyphs(x.GoPointer(), NGlyphsVar)

}

var xTextNodeGetNumGlyphs func(uintptr) uint

// Retrieves the number of glyphs in the text node.
func (x *TextNode) GetNumGlyphs() uint {

	return xTextNodeGetNumGlyphs(x.GoPointer())

}

var xTextNodeGetOffset func(uintptr) *graphene.Point

// Retrieves the offset applied to the text.
func (x *TextNode) GetOffset() *graphene.Point {

	return xTextNodeGetOffset(x.GoPointer())

}

var xTextNodeHasColorGlyphs func(uintptr) bool

// Checks whether the text @node has color glyphs.
func (x *TextNode) HasColorGlyphs() bool {

	return xTextNodeHasColorGlyphs(x.GoPointer())

}

func (c *TextNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *TextNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node for a `GdkTexture`.
type TextureNode struct {
	RenderNode
}

func TextureNodeNewFromInternalPtr(ptr uintptr) *TextureNode {
	cls := &TextureNode{}
	cls.Ptr = ptr
	return cls
}

var xNewTextureNode func(uintptr, *graphene.Rect) uintptr

// Creates a `GskRenderNode` that will render the given
// @texture into the area given by @bounds.
func NewTextureNode(TextureVar *gdk.Texture, BoundsVar *graphene.Rect) *TextureNode {
	NewTextureNodePtr := xNewTextureNode(TextureVar.GoPointer(), BoundsVar)
	if NewTextureNodePtr == 0 {
		return nil
	}

	NewTextureNodeCls := &TextureNode{}
	NewTextureNodeCls.Ptr = NewTextureNodePtr
	return NewTextureNodeCls
}

var xTextureNodeGetTexture func(uintptr) uintptr

// Retrieves the `GdkTexture` used when creating this `GskRenderNode`.
func (x *TextureNode) GetTexture() *gdk.Texture {

	GetTexturePtr := xTextureNodeGetTexture(x.GoPointer())
	if GetTexturePtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetTexturePtr)

	GetTextureCls := &gdk.Texture{}
	GetTextureCls.Ptr = GetTexturePtr
	return GetTextureCls

}

func (c *TextureNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *TextureNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// A render node applying a `GskTransform` to its single child node.
type TransformNode struct {
	RenderNode
}

func TransformNodeNewFromInternalPtr(ptr uintptr) *TransformNode {
	cls := &TransformNode{}
	cls.Ptr = ptr
	return cls
}

var xNewTransformNode func(uintptr, *Transform) uintptr

// Creates a `GskRenderNode` that will transform the given @child
// with the given @transform.
func NewTransformNode(ChildVar *RenderNode, TransformVar *Transform) *TransformNode {
	NewTransformNodePtr := xNewTransformNode(ChildVar.GoPointer(), TransformVar)
	if NewTransformNodePtr == 0 {
		return nil
	}

	NewTransformNodeCls := &TransformNode{}
	NewTransformNodeCls.Ptr = NewTransformNodePtr
	return NewTransformNodeCls
}

var xTransformNodeGetChild func(uintptr) uintptr

// Gets the child node that is getting transformed by the given @node.
func (x *TransformNode) GetChild() *RenderNode {

	GetChildPtr := xTransformNodeGetChild(x.GoPointer())
	if GetChildPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetChildPtr)

	GetChildCls := &RenderNode{}
	GetChildCls.Ptr = GetChildPtr
	return GetChildCls

}

var xTransformNodeGetTransform func(uintptr) *Transform

// Retrieves the `GskTransform` used by the @node.
func (x *TransformNode) GetTransform() *Transform {

	return xTransformNodeGetTransform(x.GoPointer())

}

func (c *TransformNode) GoPointer() uintptr {
	return c.Ptr
}

func (c *TransformNode) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewBlendNode, lib, "gsk_blend_node_new")

	core.PuregoSafeRegister(&xBlendNodeGetBlendMode, lib, "gsk_blend_node_get_blend_mode")
	core.PuregoSafeRegister(&xBlendNodeGetBottomChild, lib, "gsk_blend_node_get_bottom_child")
	core.PuregoSafeRegister(&xBlendNodeGetTopChild, lib, "gsk_blend_node_get_top_child")

	core.PuregoSafeRegister(&xNewBlurNode, lib, "gsk_blur_node_new")

	core.PuregoSafeRegister(&xBlurNodeGetChild, lib, "gsk_blur_node_get_child")
	core.PuregoSafeRegister(&xBlurNodeGetRadius, lib, "gsk_blur_node_get_radius")

	core.PuregoSafeRegister(&xNewBorderNode, lib, "gsk_border_node_new")

	core.PuregoSafeRegister(&xBorderNodeGetColors, lib, "gsk_border_node_get_colors")
	core.PuregoSafeRegister(&xBorderNodeGetOutline, lib, "gsk_border_node_get_outline")
	core.PuregoSafeRegister(&xBorderNodeGetWidths, lib, "gsk_border_node_get_widths")

	core.PuregoSafeRegister(&xNewCairoNode, lib, "gsk_cairo_node_new")

	core.PuregoSafeRegister(&xCairoNodeGetDrawContext, lib, "gsk_cairo_node_get_draw_context")
	core.PuregoSafeRegister(&xCairoNodeGetSurface, lib, "gsk_cairo_node_get_surface")

	core.PuregoSafeRegister(&xNewClipNode, lib, "gsk_clip_node_new")

	core.PuregoSafeRegister(&xClipNodeGetChild, lib, "gsk_clip_node_get_child")
	core.PuregoSafeRegister(&xClipNodeGetClip, lib, "gsk_clip_node_get_clip")

	core.PuregoSafeRegister(&xNewColorMatrixNode, lib, "gsk_color_matrix_node_new")

	core.PuregoSafeRegister(&xColorMatrixNodeGetChild, lib, "gsk_color_matrix_node_get_child")
	core.PuregoSafeRegister(&xColorMatrixNodeGetColorMatrix, lib, "gsk_color_matrix_node_get_color_matrix")
	core.PuregoSafeRegister(&xColorMatrixNodeGetColorOffset, lib, "gsk_color_matrix_node_get_color_offset")

	core.PuregoSafeRegister(&xNewColorNode, lib, "gsk_color_node_new")

	core.PuregoSafeRegister(&xColorNodeGetColor, lib, "gsk_color_node_get_color")

	core.PuregoSafeRegister(&xNewConicGradientNode, lib, "gsk_conic_gradient_node_new")

	core.PuregoSafeRegister(&xConicGradientNodeGetAngle, lib, "gsk_conic_gradient_node_get_angle")
	core.PuregoSafeRegister(&xConicGradientNodeGetCenter, lib, "gsk_conic_gradient_node_get_center")
	core.PuregoSafeRegister(&xConicGradientNodeGetColorStops, lib, "gsk_conic_gradient_node_get_color_stops")
	core.PuregoSafeRegister(&xConicGradientNodeGetNColorStops, lib, "gsk_conic_gradient_node_get_n_color_stops")
	core.PuregoSafeRegister(&xConicGradientNodeGetRotation, lib, "gsk_conic_gradient_node_get_rotation")

	core.PuregoSafeRegister(&xNewContainerNode, lib, "gsk_container_node_new")

	core.PuregoSafeRegister(&xContainerNodeGetChild, lib, "gsk_container_node_get_child")
	core.PuregoSafeRegister(&xContainerNodeGetNChildren, lib, "gsk_container_node_get_n_children")

	core.PuregoSafeRegister(&xNewCrossFadeNode, lib, "gsk_cross_fade_node_new")

	core.PuregoSafeRegister(&xCrossFadeNodeGetEndChild, lib, "gsk_cross_fade_node_get_end_child")
	core.PuregoSafeRegister(&xCrossFadeNodeGetProgress, lib, "gsk_cross_fade_node_get_progress")
	core.PuregoSafeRegister(&xCrossFadeNodeGetStartChild, lib, "gsk_cross_fade_node_get_start_child")

	core.PuregoSafeRegister(&xNewDebugNode, lib, "gsk_debug_node_new")

	core.PuregoSafeRegister(&xDebugNodeGetChild, lib, "gsk_debug_node_get_child")
	core.PuregoSafeRegister(&xDebugNodeGetMessage, lib, "gsk_debug_node_get_message")

	core.PuregoSafeRegister(&xNewGLShaderNode, lib, "gsk_gl_shader_node_new")

	core.PuregoSafeRegister(&xGLShaderNodeGetArgs, lib, "gsk_gl_shader_node_get_args")
	core.PuregoSafeRegister(&xGLShaderNodeGetChild, lib, "gsk_gl_shader_node_get_child")
	core.PuregoSafeRegister(&xGLShaderNodeGetNChildren, lib, "gsk_gl_shader_node_get_n_children")
	core.PuregoSafeRegister(&xGLShaderNodeGetShader, lib, "gsk_gl_shader_node_get_shader")

	core.PuregoSafeRegister(&xNewInsetShadowNode, lib, "gsk_inset_shadow_node_new")

	core.PuregoSafeRegister(&xInsetShadowNodeGetBlurRadius, lib, "gsk_inset_shadow_node_get_blur_radius")
	core.PuregoSafeRegister(&xInsetShadowNodeGetColor, lib, "gsk_inset_shadow_node_get_color")
	core.PuregoSafeRegister(&xInsetShadowNodeGetDx, lib, "gsk_inset_shadow_node_get_dx")
	core.PuregoSafeRegister(&xInsetShadowNodeGetDy, lib, "gsk_inset_shadow_node_get_dy")
	core.PuregoSafeRegister(&xInsetShadowNodeGetOutline, lib, "gsk_inset_shadow_node_get_outline")
	core.PuregoSafeRegister(&xInsetShadowNodeGetSpread, lib, "gsk_inset_shadow_node_get_spread")

	core.PuregoSafeRegister(&xNewLinearGradientNode, lib, "gsk_linear_gradient_node_new")

	core.PuregoSafeRegister(&xLinearGradientNodeGetColorStops, lib, "gsk_linear_gradient_node_get_color_stops")
	core.PuregoSafeRegister(&xLinearGradientNodeGetEnd, lib, "gsk_linear_gradient_node_get_end")
	core.PuregoSafeRegister(&xLinearGradientNodeGetNColorStops, lib, "gsk_linear_gradient_node_get_n_color_stops")
	core.PuregoSafeRegister(&xLinearGradientNodeGetStart, lib, "gsk_linear_gradient_node_get_start")

	core.PuregoSafeRegister(&xNewOpacityNode, lib, "gsk_opacity_node_new")

	core.PuregoSafeRegister(&xOpacityNodeGetChild, lib, "gsk_opacity_node_get_child")
	core.PuregoSafeRegister(&xOpacityNodeGetOpacity, lib, "gsk_opacity_node_get_opacity")

	core.PuregoSafeRegister(&xNewOutsetShadowNode, lib, "gsk_outset_shadow_node_new")

	core.PuregoSafeRegister(&xOutsetShadowNodeGetBlurRadius, lib, "gsk_outset_shadow_node_get_blur_radius")
	core.PuregoSafeRegister(&xOutsetShadowNodeGetColor, lib, "gsk_outset_shadow_node_get_color")
	core.PuregoSafeRegister(&xOutsetShadowNodeGetDx, lib, "gsk_outset_shadow_node_get_dx")
	core.PuregoSafeRegister(&xOutsetShadowNodeGetDy, lib, "gsk_outset_shadow_node_get_dy")
	core.PuregoSafeRegister(&xOutsetShadowNodeGetOutline, lib, "gsk_outset_shadow_node_get_outline")
	core.PuregoSafeRegister(&xOutsetShadowNodeGetSpread, lib, "gsk_outset_shadow_node_get_spread")

	core.PuregoSafeRegister(&xNewRadialGradientNode, lib, "gsk_radial_gradient_node_new")

	core.PuregoSafeRegister(&xRadialGradientNodeGetCenter, lib, "gsk_radial_gradient_node_get_center")
	core.PuregoSafeRegister(&xRadialGradientNodeGetColorStops, lib, "gsk_radial_gradient_node_get_color_stops")
	core.PuregoSafeRegister(&xRadialGradientNodeGetEnd, lib, "gsk_radial_gradient_node_get_end")
	core.PuregoSafeRegister(&xRadialGradientNodeGetHradius, lib, "gsk_radial_gradient_node_get_hradius")
	core.PuregoSafeRegister(&xRadialGradientNodeGetNColorStops, lib, "gsk_radial_gradient_node_get_n_color_stops")
	core.PuregoSafeRegister(&xRadialGradientNodeGetStart, lib, "gsk_radial_gradient_node_get_start")
	core.PuregoSafeRegister(&xRadialGradientNodeGetVradius, lib, "gsk_radial_gradient_node_get_vradius")

	core.PuregoSafeRegister(&xNewRepeatNode, lib, "gsk_repeat_node_new")

	core.PuregoSafeRegister(&xRepeatNodeGetChild, lib, "gsk_repeat_node_get_child")
	core.PuregoSafeRegister(&xRepeatNodeGetChildBounds, lib, "gsk_repeat_node_get_child_bounds")

	core.PuregoSafeRegister(&xNewRepeatingLinearGradientNode, lib, "gsk_repeating_linear_gradient_node_new")

	core.PuregoSafeRegister(&xNewRepeatingRadialGradientNode, lib, "gsk_repeating_radial_gradient_node_new")

	core.PuregoSafeRegister(&xNewRoundedClipNode, lib, "gsk_rounded_clip_node_new")

	core.PuregoSafeRegister(&xRoundedClipNodeGetChild, lib, "gsk_rounded_clip_node_get_child")
	core.PuregoSafeRegister(&xRoundedClipNodeGetClip, lib, "gsk_rounded_clip_node_get_clip")

	core.PuregoSafeRegister(&xNewShadowNode, lib, "gsk_shadow_node_new")

	core.PuregoSafeRegister(&xShadowNodeGetChild, lib, "gsk_shadow_node_get_child")
	core.PuregoSafeRegister(&xShadowNodeGetNShadows, lib, "gsk_shadow_node_get_n_shadows")
	core.PuregoSafeRegister(&xShadowNodeGetShadow, lib, "gsk_shadow_node_get_shadow")

	core.PuregoSafeRegister(&xNewTextNode, lib, "gsk_text_node_new")

	core.PuregoSafeRegister(&xTextNodeGetColor, lib, "gsk_text_node_get_color")
	core.PuregoSafeRegister(&xTextNodeGetFont, lib, "gsk_text_node_get_font")
	core.PuregoSafeRegister(&xTextNodeGetGlyphs, lib, "gsk_text_node_get_glyphs")
	core.PuregoSafeRegister(&xTextNodeGetNumGlyphs, lib, "gsk_text_node_get_num_glyphs")
	core.PuregoSafeRegister(&xTextNodeGetOffset, lib, "gsk_text_node_get_offset")
	core.PuregoSafeRegister(&xTextNodeHasColorGlyphs, lib, "gsk_text_node_has_color_glyphs")

	core.PuregoSafeRegister(&xNewTextureNode, lib, "gsk_texture_node_new")

	core.PuregoSafeRegister(&xTextureNodeGetTexture, lib, "gsk_texture_node_get_texture")

	core.PuregoSafeRegister(&xNewTransformNode, lib, "gsk_transform_node_new")

	core.PuregoSafeRegister(&xTransformNodeGetChild, lib, "gsk_transform_node_get_child")
	core.PuregoSafeRegister(&xTransformNodeGetTransform, lib, "gsk_transform_node_get_transform")

}
