// Package gsk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gsk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/cairo"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/graphene"
)

type RendererClass struct {
}

// `GskRenderer` is a class that renders a scene graph defined via a
// tree of [class@Gsk.RenderNode] instances.
//
// Typically you will use a `GskRenderer` instance to repeatedly call
// [method@Gsk.Renderer.render] to update the contents of its associated
// [class@Gdk.Surface].
//
// It is necessary to realize a `GskRenderer` instance using
// [method@Gsk.Renderer.realize] before calling [method@Gsk.Renderer.render],
// in order to create the appropriate windowing system resources needed
// to render the scene.
type Renderer struct {
	gobject.Object
}

func RendererNewFromInternalPtr(ptr uintptr) *Renderer {
	cls := &Renderer{}
	cls.Ptr = ptr
	return cls
}

var xNewForSurfaceRenderer func(uintptr) uintptr

// Creates an appropriate `GskRenderer` instance for the given @surface.
//
// If the `GSK_RENDERER` environment variable is set, GSK will
// try that renderer first, before trying the backend-specific
// default. The ultimate fallback is the cairo renderer.
//
// The renderer will be realized before it is returned.
func NewForSurfaceRenderer(SurfaceVar *gdk.Surface) *Renderer {
	NewForSurfaceRendererPtr := xNewForSurfaceRenderer(SurfaceVar.GoPointer())
	if NewForSurfaceRendererPtr == 0 {
		return nil
	}

	NewForSurfaceRendererCls := &Renderer{}
	NewForSurfaceRendererCls.Ptr = NewForSurfaceRendererPtr
	return NewForSurfaceRendererCls
}

var xRendererGetSurface func(uintptr) uintptr

// Retrieves the `GdkSurface` set using gsk_enderer_realize().
//
// If the renderer has not been realized yet, %NULL will be returned.
func (x *Renderer) GetSurface() *gdk.Surface {

	GetSurfacePtr := xRendererGetSurface(x.GoPointer())
	if GetSurfacePtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetSurfacePtr)

	GetSurfaceCls := &gdk.Surface{}
	GetSurfaceCls.Ptr = GetSurfacePtr
	return GetSurfaceCls

}

var xRendererIsRealized func(uintptr) bool

// Checks whether the @renderer is realized or not.
func (x *Renderer) IsRealized() bool {

	return xRendererIsRealized(x.GoPointer())

}

var xRendererRealize func(uintptr, uintptr) bool

// Creates the resources needed by the @renderer to render the scene
// graph.
//
// Since GTK 4.6, the surface may be `NULL`, which allows using
// renderers without having to create a surface.
//
// Note that it is mandatory to call [method@Gsk.Renderer.unrealize] before
// destroying the renderer.
func (x *Renderer) Realize(SurfaceVar *gdk.Surface) bool {

	return xRendererRealize(x.GoPointer(), SurfaceVar.GoPointer())

}

var xRendererRender func(uintptr, uintptr, *cairo.Region)

// Renders the scene graph, described by a tree of `GskRenderNode` instances
// to the renderer's surface,  ensuring that the given @region gets redrawn.
//
// If the renderer has no associated surface, this function does nothing.
//
// Renderers must ensure that changes of the contents given by the @root
// node as well as the area given by @region are redrawn. They are however
// free to not redraw any pixel outside of @region if they can guarantee that
// it didn't change.
//
// The @renderer will acquire a reference on the `GskRenderNode` tree while
// the rendering is in progress.
func (x *Renderer) Render(RootVar *RenderNode, RegionVar *cairo.Region) {

	xRendererRender(x.GoPointer(), RootVar.GoPointer(), RegionVar)

}

var xRendererRenderTexture func(uintptr, uintptr, *graphene.Rect) uintptr

// Renders the scene graph, described by a tree of `GskRenderNode` instances,
// to a `GdkTexture`.
//
// The @renderer will acquire a reference on the `GskRenderNode` tree while
// the rendering is in progress.
//
// If you want to apply any transformations to @root, you should put it into a
// transform node and pass that node instead.
func (x *Renderer) RenderTexture(RootVar *RenderNode, ViewportVar *graphene.Rect) *gdk.Texture {

	RenderTexturePtr := xRendererRenderTexture(x.GoPointer(), RootVar.GoPointer(), ViewportVar)
	if RenderTexturePtr == 0 {
		return nil
	}

	RenderTextureCls := &gdk.Texture{}
	RenderTextureCls.Ptr = RenderTexturePtr
	return RenderTextureCls

}

var xRendererUnrealize func(uintptr)

// Releases all the resources created by gsk_renderer_realize().
func (x *Renderer) Unrealize() {

	xRendererUnrealize(x.GoPointer())

}

func (c *Renderer) GoPointer() uintptr {
	return c.Ptr
}

func (c *Renderer) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GSK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewForSurfaceRenderer, lib, "gsk_renderer_new_for_surface")

	core.PuregoSafeRegister(&xRendererGetSurface, lib, "gsk_renderer_get_surface")
	core.PuregoSafeRegister(&xRendererIsRealized, lib, "gsk_renderer_is_realized")
	core.PuregoSafeRegister(&xRendererRealize, lib, "gsk_renderer_realize")
	core.PuregoSafeRegister(&xRendererRender, lib, "gsk_renderer_render")
	core.PuregoSafeRegister(&xRendererRenderTexture, lib, "gsk_renderer_render_texture")
	core.PuregoSafeRegister(&xRendererUnrealize, lib, "gsk_renderer_unrealize")

}
