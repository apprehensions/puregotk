// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/glib"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gsk"
	"github.com/jwijenbergh/puregotk/v4/pango"
)

// The `GtkFontChooserDialog` widget is a dialog for selecting a font.
//
// ![An example GtkFontChooserDialog](fontchooser.png)
//
// `GtkFontChooserDialog` implements the [iface@Gtk.FontChooser] interface
// and does not provide much API of its own.
//
// To create a `GtkFontChooserDialog`, use [ctor@Gtk.FontChooserDialog.new].
//
// # GtkFontChooserDialog as GtkBuildable
//
// The `GtkFontChooserDialog` implementation of the `GtkBuildable`
// interface exposes the buttons with the names “select_button”
// and “cancel_button”.
type FontChooserDialog struct {
	Dialog
}

func FontChooserDialogNewFromInternalPtr(ptr uintptr) *FontChooserDialog {
	cls := &FontChooserDialog{}
	cls.Ptr = ptr
	return cls
}

var xNewFontChooserDialog func(string, uintptr) uintptr

// Creates a new `GtkFontChooserDialog`.
func NewFontChooserDialog(TitleVar string, ParentVar *Window) *Widget {
	NewFontChooserDialogPtr := xNewFontChooserDialog(TitleVar, ParentVar.GoPointer())
	if NewFontChooserDialogPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(NewFontChooserDialogPtr)

	NewFontChooserDialogCls := &Widget{}
	NewFontChooserDialogCls.Ptr = NewFontChooserDialogPtr
	return NewFontChooserDialogCls
}

func (c *FontChooserDialog) GoPointer() uintptr {
	return c.Ptr
}

func (c *FontChooserDialog) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *FontChooserDialog) GetAccessibleRole() AccessibleRole {

	return XGtkAccessibleGetAccessibleRole(x.GoPointer())

}

// Resets the accessible @property to its default value.
func (x *FontChooserDialog) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *FontChooserDialog) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *FontChooserDialog) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *FontChooserDialog) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *FontChooserDialog) UpdatePropertyValue(NPropertiesVar int, PropertiesVar uintptr, ValuesVar uintptr) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *FontChooserDialog) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *FontChooserDialog) UpdateRelationValue(NRelationsVar int, RelationsVar uintptr, ValuesVar uintptr) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *FontChooserDialog) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *FontChooserDialog) UpdateStateValue(NStatesVar int, StatesVar uintptr, ValuesVar uintptr) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *FontChooserDialog) GetBuildableId() string {

	return XGtkBuildableGetBuildableId(x.GoPointer())

}

// Gets the currently-selected font name.
//
// Note that this can be a different string than what you set with
// [method@Gtk.FontChooser.set_font], as the font chooser widget may
// normalize font names and thus return a string with a different
// structure. For example, “Helvetica Italic Bold 12” could be
// normalized to “Helvetica Bold Italic 12”.
//
// Use [method@Pango.FontDescription.equal] if you want to compare two
// font descriptions.
func (x *FontChooserDialog) GetFont() string {

	return XGtkFontChooserGetFont(x.GoPointer())

}

// Gets the currently-selected font.
//
// Note that this can be a different string than what you set with
// [method@Gtk.FontChooser.set_font], as the font chooser widget may
// normalize font names and thus return a string with a different
// structure. For example, “Helvetica Italic Bold 12” could be
// normalized to “Helvetica Bold Italic 12”.
//
// Use [method@Pango.FontDescription.equal] if you want to compare two
// font descriptions.
func (x *FontChooserDialog) GetFontDesc() *pango.FontDescription {

	return XGtkFontChooserGetFontDesc(x.GoPointer())

}

// Gets the `PangoFontFace` representing the selected font group
// details (i.e. family, slant, weight, width, etc).
//
// If the selected font is not installed, returns %NULL.
func (x *FontChooserDialog) GetFontFace() *pango.FontFace {

	GetFontFacePtr := XGtkFontChooserGetFontFace(x.GoPointer())
	if GetFontFacePtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetFontFacePtr)

	GetFontFaceCls := &pango.FontFace{}
	GetFontFaceCls.Ptr = GetFontFacePtr
	return GetFontFaceCls

}

// Gets the `PangoFontFamily` representing the selected font family.
//
// Font families are a collection of font faces.
//
// If the selected font is not installed, returns %NULL.
func (x *FontChooserDialog) GetFontFamily() *pango.FontFamily {

	GetFontFamilyPtr := XGtkFontChooserGetFontFamily(x.GoPointer())
	if GetFontFamilyPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetFontFamilyPtr)

	GetFontFamilyCls := &pango.FontFamily{}
	GetFontFamilyCls.Ptr = GetFontFamilyPtr
	return GetFontFamilyCls

}

// Gets the currently-selected font features.
//
// The format of the returned string is compatible with the
// [CSS font-feature-settings property](https://www.w3.org/TR/css-fonts-4/#font-rend-desc).
// It can be passed to [func@Pango.AttrFontFeatures.new].
func (x *FontChooserDialog) GetFontFeatures() string {

	return XGtkFontChooserGetFontFeatures(x.GoPointer())

}

// Gets the custom font map of this font chooser widget,
// or %NULL if it does not have one.
func (x *FontChooserDialog) GetFontMap() *pango.FontMap {

	GetFontMapPtr := XGtkFontChooserGetFontMap(x.GoPointer())
	if GetFontMapPtr == 0 {
		return nil
	}

	GetFontMapCls := &pango.FontMap{}
	GetFontMapCls.Ptr = GetFontMapPtr
	return GetFontMapCls

}

// The selected font size.
func (x *FontChooserDialog) GetFontSize() int {

	return XGtkFontChooserGetFontSize(x.GoPointer())

}

// Gets the language that is used for font features.
func (x *FontChooserDialog) GetLanguage() string {

	return XGtkFontChooserGetLanguage(x.GoPointer())

}

// Returns the current level of granularity for selecting fonts.
func (x *FontChooserDialog) GetLevel() FontChooserLevel {

	return XGtkFontChooserGetLevel(x.GoPointer())

}

// Gets the text displayed in the preview area.
func (x *FontChooserDialog) GetPreviewText() string {

	return XGtkFontChooserGetPreviewText(x.GoPointer())

}

// Returns whether the preview entry is shown or not.
func (x *FontChooserDialog) GetShowPreviewEntry() bool {

	return XGtkFontChooserGetShowPreviewEntry(x.GoPointer())

}

// Adds a filter function that decides which fonts to display
// in the font chooser.
func (x *FontChooserDialog) SetFilterFunc(FilterVar FontFilterFunc, UserDataVar uintptr, DestroyVar glib.DestroyNotify) {

	XGtkFontChooserSetFilterFunc(x.GoPointer(), purego.NewCallback(FilterVar), UserDataVar, purego.NewCallback(DestroyVar))

}

// Sets the currently-selected font.
func (x *FontChooserDialog) SetFont(FontnameVar string) {

	XGtkFontChooserSetFont(x.GoPointer(), FontnameVar)

}

// Sets the currently-selected font from @font_desc.
func (x *FontChooserDialog) SetFontDesc(FontDescVar *pango.FontDescription) {

	XGtkFontChooserSetFontDesc(x.GoPointer(), FontDescVar)

}

// Sets a custom font map to use for this font chooser widget.
//
// A custom font map can be used to present application-specific
// fonts instead of or in addition to the normal system fonts.
//
// ```c
// FcConfig *config;
// PangoFontMap *fontmap;
//
// config = FcInitLoadConfigAndFonts ();
// FcConfigAppFontAddFile (config, my_app_font_file);
//
// fontmap = pango_cairo_font_map_new_for_font_type (CAIRO_FONT_TYPE_FT);
// pango_fc_font_map_set_config (PANGO_FC_FONT_MAP (fontmap), config);
//
// gtk_font_chooser_set_font_map (font_chooser, fontmap);
// ```
//
// Note that other GTK widgets will only be able to use the
// application-specific font if it is present in the font map they use:
//
// ```c
// context = gtk_widget_get_pango_context (label);
// pango_context_set_font_map (context, fontmap);
// ```
func (x *FontChooserDialog) SetFontMap(FontmapVar *pango.FontMap) {

	XGtkFontChooserSetFontMap(x.GoPointer(), FontmapVar.GoPointer())

}

// Sets the language to use for font features.
func (x *FontChooserDialog) SetLanguage(LanguageVar string) {

	XGtkFontChooserSetLanguage(x.GoPointer(), LanguageVar)

}

// Sets the desired level of granularity for selecting fonts.
func (x *FontChooserDialog) SetLevel(LevelVar FontChooserLevel) {

	XGtkFontChooserSetLevel(x.GoPointer(), LevelVar)

}

// Sets the text displayed in the preview area.
//
// The @text is used to show how the selected font looks.
func (x *FontChooserDialog) SetPreviewText(TextVar string) {

	XGtkFontChooserSetPreviewText(x.GoPointer(), TextVar)

}

// Shows or hides the editable preview entry.
func (x *FontChooserDialog) SetShowPreviewEntry(ShowPreviewEntryVar bool) {

	XGtkFontChooserSetShowPreviewEntry(x.GoPointer(), ShowPreviewEntryVar)

}

// Returns the renderer that is used for this `GtkNative`.
func (x *FontChooserDialog) GetRenderer() *gsk.Renderer {

	GetRendererPtr := XGtkNativeGetRenderer(x.GoPointer())
	if GetRendererPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetRendererPtr)

	GetRendererCls := &gsk.Renderer{}
	GetRendererCls.Ptr = GetRendererPtr
	return GetRendererCls

}

// Returns the surface of this `GtkNative`.
func (x *FontChooserDialog) GetSurface() *gdk.Surface {

	GetSurfacePtr := XGtkNativeGetSurface(x.GoPointer())
	if GetSurfacePtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetSurfacePtr)

	GetSurfaceCls := &gdk.Surface{}
	GetSurfaceCls.Ptr = GetSurfacePtr
	return GetSurfaceCls

}

// Retrieves the surface transform of @self.
//
// This is the translation from @self's surface coordinates into
// @self's widget coordinates.
func (x *FontChooserDialog) GetSurfaceTransform(XVar float64, YVar float64) {

	XGtkNativeGetSurfaceTransform(x.GoPointer(), XVar, YVar)

}

// Realizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *FontChooserDialog) Realize() {

	XGtkNativeRealize(x.GoPointer())

}

// Unrealizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *FontChooserDialog) Unrealize() {

	XGtkNativeUnrealize(x.GoPointer())

}

// Returns the display that this `GtkRoot` is on.
func (x *FontChooserDialog) GetDisplay() *gdk.Display {

	GetDisplayPtr := XGtkRootGetDisplay(x.GoPointer())
	if GetDisplayPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetDisplayPtr)

	GetDisplayCls := &gdk.Display{}
	GetDisplayCls.Ptr = GetDisplayPtr
	return GetDisplayCls

}

// Retrieves the current focused widget within the root.
//
// Note that this is the widget that would have the focus
// if the root is active; if the root is not focused then
// `gtk_widget_has_focus (widget)` will be %FALSE for the
// widget.
func (x *FontChooserDialog) GetFocus() *Widget {

	GetFocusPtr := XGtkRootGetFocus(x.GoPointer())
	if GetFocusPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetFocusPtr)

	GetFocusCls := &Widget{}
	GetFocusCls.Ptr = GetFocusPtr
	return GetFocusCls

}

// If @focus is not the current focus widget, and is focusable, sets
// it as the focus widget for the root.
//
// If @focus is %NULL, unsets the focus widget for the root.
//
// To set the focus to a particular widget in the root, it is usually
// more convenient to use [method@Gtk.Widget.grab_focus] instead of
// this function.
func (x *FontChooserDialog) SetFocus(FocusVar *Widget) {

	XGtkRootSetFocus(x.GoPointer(), FocusVar.GoPointer())

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewFontChooserDialog, lib, "gtk_font_chooser_dialog_new")

}
