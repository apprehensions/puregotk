// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gdk"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/gobject"
	"github.com/jwijenbergh/puregotk/v4/gsk"
)

// `GtkAppChooserDialog` shows a `GtkAppChooserWidget` inside a `GtkDialog`.
//
// ![An example GtkAppChooserDialog](appchooserdialog.png)
//
// Note that `GtkAppChooserDialog` does not have any interesting methods
// of its own. Instead, you should get the embedded `GtkAppChooserWidget`
// using [method@Gtk.AppChooserDialog.get_widget] and call its methods if
// the generic [iface@Gtk.AppChooser] interface is not sufficient for
// your needs.
//
// To set the heading that is shown above the `GtkAppChooserWidget`,
// use [method@Gtk.AppChooserDialog.set_heading].
type AppChooserDialog struct {
	Dialog
}

func AppChooserDialogNewFromInternalPtr(ptr uintptr) *AppChooserDialog {
	cls := &AppChooserDialog{}
	cls.Ptr = ptr
	return cls
}

var xNewAppChooserDialog func(uintptr, DialogFlags, uintptr) uintptr

// Creates a new `GtkAppChooserDialog` for the provided `GFile`.
//
// The dialog will show applications that can open the file.
func NewAppChooserDialog(ParentVar *Window, FlagsVar DialogFlags, FileVar gio.File) *Widget {
	NewAppChooserDialogPtr := xNewAppChooserDialog(ParentVar.GoPointer(), FlagsVar, FileVar.GoPointer())
	if NewAppChooserDialogPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(NewAppChooserDialogPtr)

	NewAppChooserDialogCls := &Widget{}
	NewAppChooserDialogCls.Ptr = NewAppChooserDialogPtr
	return NewAppChooserDialogCls
}

var xNewForContentTypeAppChooserDialog func(uintptr, DialogFlags, string) uintptr

// Creates a new `GtkAppChooserDialog` for the provided content type.
//
// The dialog will show applications that can open the content type.
func NewForContentTypeAppChooserDialog(ParentVar *Window, FlagsVar DialogFlags, ContentTypeVar string) *Widget {
	NewForContentTypeAppChooserDialogPtr := xNewForContentTypeAppChooserDialog(ParentVar.GoPointer(), FlagsVar, ContentTypeVar)
	if NewForContentTypeAppChooserDialogPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(NewForContentTypeAppChooserDialogPtr)

	NewForContentTypeAppChooserDialogCls := &Widget{}
	NewForContentTypeAppChooserDialogCls.Ptr = NewForContentTypeAppChooserDialogPtr
	return NewForContentTypeAppChooserDialogCls
}

var xAppChooserDialogGetHeading func(uintptr) string

// Returns the text to display at the top of the dialog.
func (x *AppChooserDialog) GetHeading() string {

	return xAppChooserDialogGetHeading(x.GoPointer())

}

var xAppChooserDialogGetWidget func(uintptr) uintptr

// Returns the `GtkAppChooserWidget` of this dialog.
func (x *AppChooserDialog) GetWidget() *Widget {

	GetWidgetPtr := xAppChooserDialogGetWidget(x.GoPointer())
	if GetWidgetPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetWidgetPtr)

	GetWidgetCls := &Widget{}
	GetWidgetCls.Ptr = GetWidgetPtr
	return GetWidgetCls

}

var xAppChooserDialogSetHeading func(uintptr, string)

// Sets the text to display at the top of the dialog.
//
// If the heading is not set, the dialog displays a default text.
func (x *AppChooserDialog) SetHeading(HeadingVar string) {

	xAppChooserDialogSetHeading(x.GoPointer(), HeadingVar)

}

func (c *AppChooserDialog) GoPointer() uintptr {
	return c.Ptr
}

func (c *AppChooserDialog) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
func (x *AppChooserDialog) GetAccessibleRole() AccessibleRole {

	return XGtkAccessibleGetAccessibleRole(x.GoPointer())

}

// Resets the accessible @property to its default value.
func (x *AppChooserDialog) ResetProperty(PropertyVar AccessibleProperty) {

	XGtkAccessibleResetProperty(x.GoPointer(), PropertyVar)

}

// Resets the accessible @relation to its default value.
func (x *AppChooserDialog) ResetRelation(RelationVar AccessibleRelation) {

	XGtkAccessibleResetRelation(x.GoPointer(), RelationVar)

}

// Resets the accessible @state to its default value.
func (x *AppChooserDialog) ResetState(StateVar AccessibleState) {

	XGtkAccessibleResetState(x.GoPointer(), StateVar)

}

// Updates a list of accessible properties.
//
// See the [enum@Gtk.AccessibleProperty] documentation for the
// value types of accessible properties.
//
// This function should be called by `GtkWidget` types whenever
// an accessible property change must be communicated to assistive
// technologies.
//
// Example:
// ```c
// value = gtk_adjustment_get_value (adjustment);
// gtk_accessible_update_property (GTK_ACCESSIBLE (spin_button),
//
//	GTK_ACCESSIBLE_PROPERTY_VALUE_NOW, value,
//	-1);
//
// ```
func (x *AppChooserDialog) UpdateProperty(FirstPropertyVar AccessibleProperty, varArgs ...interface{}) {

	XGtkAccessibleUpdateProperty(x.GoPointer(), FirstPropertyVar, varArgs...)

}

// Updates an array of accessible properties.
//
// This function should be called by `GtkWidget` types whenever an accessible
// property change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *AppChooserDialog) UpdatePropertyValue(NPropertiesVar int, PropertiesVar uintptr, ValuesVar uintptr) {

	XGtkAccessibleUpdatePropertyValue(x.GoPointer(), NPropertiesVar, PropertiesVar, ValuesVar)

}

// Updates a list of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// If the [enum@Gtk.AccessibleRelation] requires a list of references,
// you should pass each reference individually, followed by %NULL, e.g.
//
// ```c
// gtk_accessible_update_relation (accessible,
//
//	GTK_ACCESSIBLE_RELATION_CONTROLS,
//	  ref1, NULL,
//	GTK_ACCESSIBLE_RELATION_LABELLED_BY,
//	  ref1, ref2, ref3, NULL,
//	-1);
//
// ```
func (x *AppChooserDialog) UpdateRelation(FirstRelationVar AccessibleRelation, varArgs ...interface{}) {

	XGtkAccessibleUpdateRelation(x.GoPointer(), FirstRelationVar, varArgs...)

}

// Updates an array of accessible relations.
//
// This function should be called by `GtkWidget` types whenever an accessible
// relation change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *AppChooserDialog) UpdateRelationValue(NRelationsVar int, RelationsVar uintptr, ValuesVar uintptr) {

	XGtkAccessibleUpdateRelationValue(x.GoPointer(), NRelationsVar, RelationsVar, ValuesVar)

}

// Updates a list of accessible states. See the [enum@Gtk.AccessibleState]
// documentation for the value types of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// Example:
// ```c
// value = GTK_ACCESSIBLE_TRISTATE_MIXED;
// gtk_accessible_update_state (GTK_ACCESSIBLE (check_button),
//
//	GTK_ACCESSIBLE_STATE_CHECKED, value,
//	-1);
//
// ```
func (x *AppChooserDialog) UpdateState(FirstStateVar AccessibleState, varArgs ...interface{}) {

	XGtkAccessibleUpdateState(x.GoPointer(), FirstStateVar, varArgs...)

}

// Updates an array of accessible states.
//
// This function should be called by `GtkWidget` types whenever an accessible
// state change must be communicated to assistive technologies.
//
// This function is meant to be used by language bindings.
func (x *AppChooserDialog) UpdateStateValue(NStatesVar int, StatesVar uintptr, ValuesVar uintptr) {

	XGtkAccessibleUpdateStateValue(x.GoPointer(), NStatesVar, StatesVar, ValuesVar)

}

// Returns the currently selected application.
func (x *AppChooserDialog) GetAppInfo() *gio.AppInfoBase {

	GetAppInfoPtr := XGtkAppChooserGetAppInfo(x.GoPointer())
	if GetAppInfoPtr == 0 {
		return nil
	}

	GetAppInfoCls := &gio.AppInfoBase{}
	GetAppInfoCls.Ptr = GetAppInfoPtr
	return GetAppInfoCls

}

// Returns the content type for which the `GtkAppChooser`
// shows applications.
func (x *AppChooserDialog) GetContentType() string {

	return XGtkAppChooserGetContentType(x.GoPointer())

}

// Reloads the list of applications.
func (x *AppChooserDialog) Refresh() {

	XGtkAppChooserRefresh(x.GoPointer())

}

// Gets the ID of the @buildable object.
//
// `GtkBuilder` sets the name based on the ID attribute
// of the &lt;object&gt; tag used to construct the @buildable.
func (x *AppChooserDialog) GetBuildableId() string {

	return XGtkBuildableGetBuildableId(x.GoPointer())

}

// Returns the renderer that is used for this `GtkNative`.
func (x *AppChooserDialog) GetRenderer() *gsk.Renderer {

	GetRendererPtr := XGtkNativeGetRenderer(x.GoPointer())
	if GetRendererPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetRendererPtr)

	GetRendererCls := &gsk.Renderer{}
	GetRendererCls.Ptr = GetRendererPtr
	return GetRendererCls

}

// Returns the surface of this `GtkNative`.
func (x *AppChooserDialog) GetSurface() *gdk.Surface {

	GetSurfacePtr := XGtkNativeGetSurface(x.GoPointer())
	if GetSurfacePtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetSurfacePtr)

	GetSurfaceCls := &gdk.Surface{}
	GetSurfaceCls.Ptr = GetSurfacePtr
	return GetSurfaceCls

}

// Retrieves the surface transform of @self.
//
// This is the translation from @self's surface coordinates into
// @self's widget coordinates.
func (x *AppChooserDialog) GetSurfaceTransform(XVar float64, YVar float64) {

	XGtkNativeGetSurfaceTransform(x.GoPointer(), XVar, YVar)

}

// Realizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *AppChooserDialog) Realize() {

	XGtkNativeRealize(x.GoPointer())

}

// Unrealizes a `GtkNative`.
//
// This should only be used by subclasses.
func (x *AppChooserDialog) Unrealize() {

	XGtkNativeUnrealize(x.GoPointer())

}

// Returns the display that this `GtkRoot` is on.
func (x *AppChooserDialog) GetDisplay() *gdk.Display {

	GetDisplayPtr := XGtkRootGetDisplay(x.GoPointer())
	if GetDisplayPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetDisplayPtr)

	GetDisplayCls := &gdk.Display{}
	GetDisplayCls.Ptr = GetDisplayPtr
	return GetDisplayCls

}

// Retrieves the current focused widget within the root.
//
// Note that this is the widget that would have the focus
// if the root is active; if the root is not focused then
// `gtk_widget_has_focus (widget)` will be %FALSE for the
// widget.
func (x *AppChooserDialog) GetFocus() *Widget {

	GetFocusPtr := XGtkRootGetFocus(x.GoPointer())
	if GetFocusPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetFocusPtr)

	GetFocusCls := &Widget{}
	GetFocusCls.Ptr = GetFocusPtr
	return GetFocusCls

}

// If @focus is not the current focus widget, and is focusable, sets
// it as the focus widget for the root.
//
// If @focus is %NULL, unsets the focus widget for the root.
//
// To set the focus to a particular widget in the root, it is usually
// more convenient to use [method@Gtk.Widget.grab_focus] instead of
// this function.
func (x *AppChooserDialog) SetFocus(FocusVar *Widget) {

	XGtkRootSetFocus(x.GoPointer(), FocusVar.GoPointer())

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewAppChooserDialog, lib, "gtk_app_chooser_dialog_new")
	core.PuregoSafeRegister(&xNewForContentTypeAppChooserDialog, lib, "gtk_app_chooser_dialog_new_for_content_type")

	core.PuregoSafeRegister(&xAppChooserDialogGetHeading, lib, "gtk_app_chooser_dialog_get_heading")
	core.PuregoSafeRegister(&xAppChooserDialogGetWidget, lib, "gtk_app_chooser_dialog_get_widget")
	core.PuregoSafeRegister(&xAppChooserDialogSetHeading, lib, "gtk_app_chooser_dialog_set_heading")

}
