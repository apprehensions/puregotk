// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gio"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type FlattenListModelClass struct {
	ParentClass uintptr
}

// `GtkFlattenListModel` is a list model that concatenates other list models.
//
// `GtkFlattenListModel` takes a list model containing list models,
//
//	and flattens it into a single model.
type FlattenListModel struct {
	gobject.Object
}

func FlattenListModelNewFromInternalPtr(ptr uintptr) *FlattenListModel {
	cls := &FlattenListModel{}
	cls.Ptr = ptr
	return cls
}

var xNewFlattenListModel func(uintptr) uintptr

// Creates a new `GtkFlattenListModel` that flattens @list.
func NewFlattenListModel(ModelVar gio.ListModel) *FlattenListModel {
	NewFlattenListModelPtr := xNewFlattenListModel(ModelVar.GoPointer())
	if NewFlattenListModelPtr == 0 {
		return nil
	}

	NewFlattenListModelCls := &FlattenListModel{}
	NewFlattenListModelCls.Ptr = NewFlattenListModelPtr
	return NewFlattenListModelCls
}

var xFlattenListModelGetModel func(uintptr) uintptr

// Gets the model set via gtk_flatten_list_model_set_model().
func (x *FlattenListModel) GetModel() *gio.ListModelBase {

	GetModelPtr := xFlattenListModelGetModel(x.GoPointer())
	if GetModelPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetModelPtr)

	GetModelCls := &gio.ListModelBase{}
	GetModelCls.Ptr = GetModelPtr
	return GetModelCls

}

var xFlattenListModelGetModelForItem func(uintptr, uint) uintptr

// Returns the model containing the item at the given position.
func (x *FlattenListModel) GetModelForItem(PositionVar uint) *gio.ListModelBase {

	GetModelForItemPtr := xFlattenListModelGetModelForItem(x.GoPointer(), PositionVar)
	if GetModelForItemPtr == 0 {
		return nil
	}

	gobject.IncreaseRef(GetModelForItemPtr)

	GetModelForItemCls := &gio.ListModelBase{}
	GetModelForItemCls.Ptr = GetModelForItemPtr
	return GetModelForItemCls

}

var xFlattenListModelSetModel func(uintptr, uintptr)

// Sets a new model to be flattened.
func (x *FlattenListModel) SetModel(ModelVar gio.ListModel) {

	xFlattenListModelSetModel(x.GoPointer(), ModelVar.GoPointer())

}

func (c *FlattenListModel) GoPointer() uintptr {
	return c.Ptr
}

func (c *FlattenListModel) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// See also: g_list_model_get_n_items()
func (x *FlattenListModel) GetItem(PositionVar uint) uintptr {

	return gio.XGListModelGetItem(x.GoPointer(), PositionVar)

}

// Gets the type of the items in @list.
//
// All items returned from g_list_model_get_item() are of the type
// returned by this function, or a subtype, or if the type is an
// interface, they are an implementation of that interface.
//
// The item type of a #GListModel can not change during the life of the
// model.
func (x *FlattenListModel) GetItemType() []interface{} {

	return gio.XGListModelGetItemType(x.GoPointer())

}

// Gets the number of items in @list.
//
// Depending on the model implementation, calling this function may be
// less efficient than iterating the list with increasing values for
// @position until g_list_model_get_item() returns %NULL.
func (x *FlattenListModel) GetNItems() uint {

	return gio.XGListModelGetNItems(x.GoPointer())

}

// Get the item at @position.
//
// If @position is greater than the number of items in @list, %NULL is
// returned.
//
// %NULL is never returned for an index that is smaller than the length
// of the list.
//
// This function is meant to be used by language bindings in place
// of g_list_model_get_item().
//
// See also: g_list_model_get_n_items()
func (x *FlattenListModel) GetObject(PositionVar uint) *gobject.Object {

	GetObjectPtr := gio.XGListModelGetObject(x.GoPointer(), PositionVar)
	if GetObjectPtr == 0 {
		return nil
	}

	GetObjectCls := &gobject.Object{}
	GetObjectCls.Ptr = GetObjectPtr
	return GetObjectCls

}

// Emits the #GListModel::items-changed signal on @list.
//
// This function should only be called by classes implementing
// #GListModel. It has to be called after the internal representation
// of @list has been updated, because handlers connected to this signal
// might query the new state of the list.
//
// Implementations must only make changes to the model (as visible to
// its consumer) in places that will not cause problems for that
// consumer.  For models that are driven directly by a write API (such
// as #GListStore), changes can be reported in response to uses of that
// API.  For models that represent remote data, changes should only be
// made from a fresh mainloop dispatch.  It is particularly not
// permitted to make changes in response to a call to the #GListModel
// consumer API.
//
// Stated another way: in general, it is assumed that code making a
// series of accesses to the model via the API, without returning to the
// mainloop, and without calling other code, will continue to view the
// same contents of the model.
func (x *FlattenListModel) ItemsChanged(PositionVar uint, RemovedVar uint, AddedVar uint) {

	gio.XGListModelItemsChanged(x.GoPointer(), PositionVar, RemovedVar, AddedVar)

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewFlattenListModel, lib, "gtk_flatten_list_model_new")

	core.PuregoSafeRegister(&xFlattenListModelGetModel, lib, "gtk_flatten_list_model_get_model")
	core.PuregoSafeRegister(&xFlattenListModelGetModelForItem, lib, "gtk_flatten_list_model_get_model_for_item")
	core.PuregoSafeRegister(&xFlattenListModelSetModel, lib, "gtk_flatten_list_model_set_model")

}
