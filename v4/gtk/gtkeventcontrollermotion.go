// Package gtk was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package gtk

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
	"github.com/jwijenbergh/puregotk/v4/gobject"
)

type EventControllerMotionClass struct {
}

// `GtkEventControllerMotion` is an event controller tracking the pointer
// position.
//
// The event controller offers [signal@Gtk.EventControllerMotion::enter]
// and [signal@Gtk.EventControllerMotion::leave] signals, as well as
// [property@Gtk.EventControllerMotion:is-pointer] and
// [property@Gtk.EventControllerMotion:contains-pointer] properties
// which are updated to reflect changes in the pointer position as it
// moves over the widget.
type EventControllerMotion struct {
	EventController
}

func EventControllerMotionNewFromInternalPtr(ptr uintptr) *EventControllerMotion {
	cls := &EventControllerMotion{}
	cls.Ptr = ptr
	return cls
}

var xNewEventControllerMotion func() uintptr

// Creates a new event controller that will handle motion events.
func NewEventControllerMotion() *EventController {
	var cls *EventController

	cret := xNewEventControllerMotion()

	if cret == 0 {
		return nil
	}
	cls = &EventController{}
	cls.Ptr = cret
	return cls
}

var xEventControllerMotionContainsPointer func(uintptr) bool

// Returns if a pointer is within @self or one of its children.
func (x *EventControllerMotion) ContainsPointer() bool {

	cret := xEventControllerMotionContainsPointer(x.GoPointer())
	return cret
}

var xEventControllerMotionIsPointer func(uintptr) bool

// Returns if a pointer is within @self, but not one of its children.
func (x *EventControllerMotion) IsPointer() bool {

	cret := xEventControllerMotionIsPointer(x.GoPointer())
	return cret
}

func (c *EventControllerMotion) GoPointer() uintptr {
	return c.Ptr
}

func (c *EventControllerMotion) SetGoPointer(ptr uintptr) {
	c.Ptr = ptr
}

// Signals that the pointer has entered the widget.
func (x *EventControllerMotion) ConnectEnter(cb func(EventControllerMotion, float64, float64)) {
	fcb := func(clsPtr uintptr, XVarp float64, YVarp float64) {
		fa := EventControllerMotion{}
		fa.Ptr = clsPtr

		cb(fa, XVarp, YVarp)

	}
	gobject.ObjectConnect(x.GoPointer(), "signal::enter", purego.NewCallback(fcb))
}

// Signals that the pointer has left the widget.
func (x *EventControllerMotion) ConnectLeave(cb func(EventControllerMotion)) {
	fcb := func(clsPtr uintptr) {
		fa := EventControllerMotion{}
		fa.Ptr = clsPtr

		cb(fa)

	}
	gobject.ObjectConnect(x.GoPointer(), "signal::leave", purego.NewCallback(fcb))
}

// Emitted when the pointer moves inside the widget.
func (x *EventControllerMotion) ConnectMotion(cb func(EventControllerMotion, float64, float64)) {
	fcb := func(clsPtr uintptr, XVarp float64, YVarp float64) {
		fa := EventControllerMotion{}
		fa.Ptr = clsPtr

		cb(fa, XVarp, YVarp)

	}
	gobject.ObjectConnect(x.GoPointer(), "signal::motion", purego.NewCallback(fcb))
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GTK"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}

	core.PuregoSafeRegister(&xNewEventControllerMotion, lib, "gtk_event_controller_motion_new")

	core.PuregoSafeRegister(&xEventControllerMotionContainsPointer, lib, "gtk_event_controller_motion_contains_pointer")
	core.PuregoSafeRegister(&xEventControllerMotionIsPointer, lib, "gtk_event_controller_motion_is_pointer")

}
