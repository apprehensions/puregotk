// Package graphene was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package graphene

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// The location and size of a rectangle region.
//
// The width and height of a #graphene_rect_t can be negative; for instance,
// a #graphene_rect_t with an origin of [ 0, 0 ] and a size of [ 10, 10 ] is
// equivalent to a #graphene_rect_t with an origin of [ 10, 10 ] and a size
// of [ -10, -10 ].
//
// Application code can normalize rectangles using graphene_rect_normalize();
// this function will ensure that the width and height of a rectangle are
// positive values. All functions taking a #graphene_rect_t as an argument
// will internally operate on a normalized copy; all functions returning a
// #graphene_rect_t will always return a normalized rectangle.
type Rect struct {
	Origin uintptr

	Size uintptr
}

var xRectAlloc func() *Rect

// Allocates a new #graphene_rect_t.
//
// The contents of the returned rectangle are undefined.
func RectAlloc() *Rect {

	cret := xRectAlloc()
	return cret
}

var xRectZero func() *Rect

// Returns a degenerate rectangle with origin fixed at (0, 0) and
// a size of 0, 0.
func RectZero() *Rect {

	cret := xRectZero()
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xRectAlloc, lib, "graphene_rect_alloc")
	core.PuregoSafeRegister(&xRectZero, lib, "graphene_rect_zero")

}
