// Package graphene was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package graphene

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// A structure capable of holding a vector with four dimensions: x, y, z, and w.
//
// The contents of the #graphene_vec4_t structure are private and should
// never be accessed directly.
type Vec4 struct {
	Value uintptr
}

var xVec4One func() *Vec4

// Retrieves a pointer to a #graphene_vec4_t with all its
// components set to 1.
func Vec4One() *Vec4 {

	return xVec4One()

}

var xVec4WAxis func() *Vec4

// Retrieves a pointer to a #graphene_vec4_t with its
// components set to (0, 0, 0, 1).
func Vec4WAxis() *Vec4 {

	return xVec4WAxis()

}

var xVec4XAxis func() *Vec4

// Retrieves a pointer to a #graphene_vec4_t with its
// components set to (1, 0, 0, 0).
func Vec4XAxis() *Vec4 {

	return xVec4XAxis()

}

var xVec4YAxis func() *Vec4

// Retrieves a pointer to a #graphene_vec4_t with its
// components set to (0, 1, 0, 0).
func Vec4YAxis() *Vec4 {

	return xVec4YAxis()

}

var xVec4ZAxis func() *Vec4

// Retrieves a pointer to a #graphene_vec4_t with its
// components set to (0, 0, 1, 0).
func Vec4ZAxis() *Vec4 {

	return xVec4ZAxis()

}

var xVec4Zero func() *Vec4

// Retrieves a pointer to a #graphene_vec4_t with all its
// components set to 0.
func Vec4Zero() *Vec4 {

	return xVec4Zero()

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xVec4One, lib, "graphene_vec4_one")
	core.PuregoSafeRegister(&xVec4WAxis, lib, "graphene_vec4_w_axis")
	core.PuregoSafeRegister(&xVec4XAxis, lib, "graphene_vec4_x_axis")
	core.PuregoSafeRegister(&xVec4YAxis, lib, "graphene_vec4_y_axis")
	core.PuregoSafeRegister(&xVec4ZAxis, lib, "graphene_vec4_z_axis")
	core.PuregoSafeRegister(&xVec4Zero, lib, "graphene_vec4_zero")

}
