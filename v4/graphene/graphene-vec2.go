// Package graphene was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package graphene

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// A structure capable of holding a vector with two dimensions, x and y.
//
// The contents of the #graphene_vec2_t structure are private and should
// never be accessed directly.
type Vec2 struct {
	Value uintptr
}

var xVec2One func() *Vec2

// Retrieves a constant vector with (1, 1) components.
func Vec2One() *Vec2 {

	cret := xVec2One()
	return cret
}

var xVec2XAxis func() *Vec2

// Retrieves a constant vector with (1, 0) components.
func Vec2XAxis() *Vec2 {

	cret := xVec2XAxis()
	return cret
}

var xVec2YAxis func() *Vec2

// Retrieves a constant vector with (0, 1) components.
func Vec2YAxis() *Vec2 {

	cret := xVec2YAxis()
	return cret
}

var xVec2Zero func() *Vec2

// Retrieves a constant vector with (0, 0) components.
func Vec2Zero() *Vec2 {

	cret := xVec2Zero()
	return cret
}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xVec2One, lib, "graphene_vec2_one")
	core.PuregoSafeRegister(&xVec2XAxis, lib, "graphene_vec2_x_axis")
	core.PuregoSafeRegister(&xVec2YAxis, lib, "graphene_vec2_y_axis")
	core.PuregoSafeRegister(&xVec2Zero, lib, "graphene_vec2_zero")

}
