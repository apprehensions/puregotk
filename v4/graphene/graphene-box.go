// Package graphene was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package graphene

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// A 3D box, described as the volume between a minimum and
// a maximum vertices.
type Box struct {
	Min uintptr

	Max uintptr
}

var xBoxEmpty func() *Box

// A degenerate #graphene_box_t that can only be expanded.
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxEmpty() *Box {

	return xBoxEmpty()

}

var xBoxInfinite func() *Box

// A degenerate #graphene_box_t that cannot be expanded.
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxInfinite() *Box {

	return xBoxInfinite()

}

var xBoxMinusOne func() *Box

// A #graphene_box_t with the minimum vertex set at (-1, -1, -1) and the
// maximum vertex set at (0, 0, 0).
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxMinusOne() *Box {

	return xBoxMinusOne()

}

var xBoxOne func() *Box

// A #graphene_box_t with the minimum vertex set at (0, 0, 0) and the
// maximum vertex set at (1, 1, 1).
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxOne() *Box {

	return xBoxOne()

}

var xBoxOneMinusOne func() *Box

// A #graphene_box_t with the minimum vertex set at (-1, -1, -1) and the
// maximum vertex set at (1, 1, 1).
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxOneMinusOne() *Box {

	return xBoxOneMinusOne()

}

var xBoxZero func() *Box

// A #graphene_box_t with both the minimum and maximum vertices set at (0, 0, 0).
//
// The returned value is owned by Graphene and should not be modified or freed.
func BoxZero() *Box {

	return xBoxZero()

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xBoxEmpty, lib, "graphene_box_empty")
	core.PuregoSafeRegister(&xBoxInfinite, lib, "graphene_box_infinite")
	core.PuregoSafeRegister(&xBoxMinusOne, lib, "graphene_box_minus_one")
	core.PuregoSafeRegister(&xBoxOne, lib, "graphene_box_one")
	core.PuregoSafeRegister(&xBoxOneMinusOne, lib, "graphene_box_one_minus_one")
	core.PuregoSafeRegister(&xBoxZero, lib, "graphene_box_zero")

}
