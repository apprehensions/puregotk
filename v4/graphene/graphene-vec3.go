// Package graphene was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package graphene

import (
	"github.com/jwijenbergh/purego"
	"github.com/jwijenbergh/puregotk/internal/core"
)

// A structure capable of holding a vector with three dimensions: x, y, and z.
//
// The contents of the #graphene_vec3_t structure are private and should
// never be accessed directly.
type Vec3 struct {
	Value uintptr
}

var xVec3One func() *Vec3

// Provides a constant pointer to a vector with three components,
// all sets to 1.
func Vec3One() *Vec3 {

	return xVec3One()

}

var xVec3XAxis func() *Vec3

// Provides a constant pointer to a vector with three components
// with values set to (1, 0, 0).
func Vec3XAxis() *Vec3 {

	return xVec3XAxis()

}

var xVec3YAxis func() *Vec3

// Provides a constant pointer to a vector with three components
// with values set to (0, 1, 0).
func Vec3YAxis() *Vec3 {

	return xVec3YAxis()

}

var xVec3ZAxis func() *Vec3

// Provides a constant pointer to a vector with three components
// with values set to (0, 0, 1).
func Vec3ZAxis() *Vec3 {

	return xVec3ZAxis()

}

var xVec3Zero func() *Vec3

// Provides a constant pointer to a vector with three components,
// all sets to 0.
func Vec3Zero() *Vec3 {

	return xVec3Zero()

}

func init() {
	lib, err := purego.Dlopen(core.GetPath("GRAPHENE"), purego.RTLD_NOW|purego.RTLD_GLOBAL)
	if err != nil {
		panic(err)
	}
	core.PuregoSafeRegister(&xVec3One, lib, "graphene_vec3_one")
	core.PuregoSafeRegister(&xVec3XAxis, lib, "graphene_vec3_x_axis")
	core.PuregoSafeRegister(&xVec3YAxis, lib, "graphene_vec3_y_axis")
	core.PuregoSafeRegister(&xVec3ZAxis, lib, "graphene_vec3_z_axis")
	core.PuregoSafeRegister(&xVec3Zero, lib, "graphene_vec3_zero")

}
