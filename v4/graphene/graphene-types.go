// Package graphene was automatically generated by github.com/jwijenbergh/puregotk DO NOT EDIT
package graphene

const (
	// Evaluates to the number of components of a #graphene_vec2_t.
	//
	// This symbol is useful when declaring a C array of floating
	// point values to be used with graphene_vec2_init_from_float() and
	// graphene_vec2_to_float(), e.g.
	//
	// |[
	//   float v[GRAPHENE_VEC2_LEN];
	//
	//   // vec is defined elsewhere
	//   graphene_vec2_to_float (&amp;vec, v);
	//
	//   for (int i = 0; i &lt; GRAPHENE_VEC2_LEN; i++)
	//     fprintf (stdout, "component %d: %g\n", i, v[i]);
	// ]|
	VEC2_LEN int = 2
	// Evaluates to the number of components of a #graphene_vec3_t.
	//
	// This symbol is useful when declaring a C array of floating
	// point values to be used with graphene_vec3_init_from_float() and
	// graphene_vec3_to_float(), e.g.
	//
	// |[
	//   float v[GRAPHENE_VEC3_LEN];
	//
	//   // vec is defined elsewhere
	//   graphene_vec3_to_float (&amp;vec, v);
	//
	//   for (int i = 0; i &lt; GRAPHENE_VEC2_LEN; i++)
	//     fprintf (stdout, "component %d: %g\n", i, v[i]);
	// ]|
	VEC3_LEN int = 3
	// Evaluates to the number of components of a #graphene_vec4_t.
	//
	// This symbol is useful when declaring a C array of floating
	// point values to be used with graphene_vec4_init_from_float() and
	// graphene_vec4_to_float(), e.g.
	//
	// |[
	//   float v[GRAPHENE_VEC4_LEN];
	//
	//   // vec is defined elsewhere
	//   graphene_vec4_to_float (&amp;vec, v);
	//
	//   for (int i = 0; i &lt; GRAPHENE_VEC4_LEN; i++)
	//     fprintf (stdout, "component %d: %g\n", i, v[i]);
	// ]|
	VEC4_LEN int = 4
)
